'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18449
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ShoppingCart")>  _
Partial Public Class DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
    Partial Private Sub InsertCategory(instance As DataClasses.Category)
    End Sub
    Partial Private Sub UpdateCategory(instance As DataClasses.Category)
    End Sub
    Partial Private Sub DeleteCategory(instance As DataClasses.Category)
    End Sub
    Partial Private Sub InsertCoupon(instance As DataClasses.Coupon)
    End Sub
    Partial Private Sub UpdateCoupon(instance As DataClasses.Coupon)
    End Sub
    Partial Private Sub DeleteCoupon(instance As DataClasses.Coupon)
    End Sub
    Partial Private Sub InsertCustomContent(instance As DataClasses.CustomContent)
    End Sub
    Partial Private Sub UpdateCustomContent(instance As DataClasses.CustomContent)
    End Sub
    Partial Private Sub DeleteCustomContent(instance As DataClasses.CustomContent)
    End Sub
    Partial Private Sub Insertdtproperty(instance As DataClasses.dtproperty)
    End Sub
    Partial Private Sub Updatedtproperty(instance As DataClasses.dtproperty)
    End Sub
    Partial Private Sub Deletedtproperty(instance As DataClasses.dtproperty)
    End Sub
    Partial Private Sub InsertOrderItemOption(instance As DataClasses.OrderItemOption)
    End Sub
    Partial Private Sub UpdateOrderItemOption(instance As DataClasses.OrderItemOption)
    End Sub
    Partial Private Sub DeleteOrderItemOption(instance As DataClasses.OrderItemOption)
    End Sub
    Partial Private Sub InsertOrderItem(instance As DataClasses.OrderItem)
    End Sub
    Partial Private Sub UpdateOrderItem(instance As DataClasses.OrderItem)
    End Sub
    Partial Private Sub DeleteOrderItem(instance As DataClasses.OrderItem)
    End Sub
    Partial Private Sub InsertOrderMemo(instance As DataClasses.OrderMemo)
    End Sub
    Partial Private Sub UpdateOrderMemo(instance As DataClasses.OrderMemo)
    End Sub
    Partial Private Sub DeleteOrderMemo(instance As DataClasses.OrderMemo)
    End Sub
    Partial Private Sub InsertOrder(instance As DataClasses.Order)
    End Sub
    Partial Private Sub UpdateOrder(instance As DataClasses.Order)
    End Sub
    Partial Private Sub DeleteOrder(instance As DataClasses.Order)
    End Sub
    Partial Private Sub InsertProductOption(instance As DataClasses.ProductOption)
    End Sub
    Partial Private Sub UpdateProductOption(instance As DataClasses.ProductOption)
    End Sub
    Partial Private Sub DeleteProductOption(instance As DataClasses.ProductOption)
    End Sub
    Partial Private Sub InsertProductOptionValue(instance As DataClasses.ProductOptionValue)
    End Sub
    Partial Private Sub UpdateProductOptionValue(instance As DataClasses.ProductOptionValue)
    End Sub
    Partial Private Sub DeleteProductOptionValue(instance As DataClasses.ProductOptionValue)
    End Sub
    Partial Private Sub InsertProductPriceRange(instance As DataClasses.ProductPriceRange)
    End Sub
    Partial Private Sub UpdateProductPriceRange(instance As DataClasses.ProductPriceRange)
    End Sub
    Partial Private Sub DeleteProductPriceRange(instance As DataClasses.ProductPriceRange)
    End Sub
    Partial Private Sub InsertProduct(instance As DataClasses.Product)
    End Sub
    Partial Private Sub UpdateProduct(instance As DataClasses.Product)
    End Sub
    Partial Private Sub DeleteProduct(instance As DataClasses.Product)
    End Sub
    Partial Private Sub InsertSetting(instance As DataClasses.Setting)
    End Sub
    Partial Private Sub UpdateSetting(instance As DataClasses.Setting)
    End Sub
    Partial Private Sub DeleteSetting(instance As DataClasses.Setting)
    End Sub
    Partial Private Sub InsertSiteCategory(instance As DataClasses.SiteCategory)
    End Sub
    Partial Private Sub UpdateSiteCategory(instance As DataClasses.SiteCategory)
    End Sub
    Partial Private Sub DeleteSiteCategory(instance As DataClasses.SiteCategory)
    End Sub
    Partial Private Sub InsertSiteProduct(instance As DataClasses.SiteProduct)
    End Sub
    Partial Private Sub UpdateSiteProduct(instance As DataClasses.SiteProduct)
    End Sub
    Partial Private Sub DeleteSiteProduct(instance As DataClasses.SiteProduct)
    End Sub
    Partial Private Sub InsertSite(instance As DataClasses.Site)
    End Sub
    Partial Private Sub UpdateSite(instance As DataClasses.Site)
    End Sub
    Partial Private Sub DeleteSite(instance As DataClasses.Site)
    End Sub
    Partial Private Sub InsertState(instance As DataClasses.State)
    End Sub
    Partial Private Sub UpdateState(instance As DataClasses.State)
    End Sub
    Partial Private Sub DeleteState(instance As DataClasses.State)
    End Sub
    Partial Private Sub InsertUser(instance As DataClasses.User)
    End Sub
    Partial Private Sub UpdateUser(instance As DataClasses.User)
    End Sub
    Partial Private Sub DeleteUser(instance As DataClasses.User)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ShoppingCartConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of DataClasses.Category)
		Get
			Return Me.GetTable(Of DataClasses.Category)
		End Get
	End Property
	
	Public ReadOnly Property Coupons() As System.Data.Linq.Table(Of DataClasses.Coupon)
		Get
			Return Me.GetTable(Of DataClasses.Coupon)
		End Get
	End Property
	
	Public ReadOnly Property CustomContents() As System.Data.Linq.Table(Of DataClasses.CustomContent)
		Get
			Return Me.GetTable(Of DataClasses.CustomContent)
		End Get
	End Property
	
	Public ReadOnly Property dtproperties() As System.Data.Linq.Table(Of DataClasses.dtproperty)
		Get
			Return Me.GetTable(Of DataClasses.dtproperty)
		End Get
	End Property
	
	Public ReadOnly Property NewsletterSubscriptions() As System.Data.Linq.Table(Of DataClasses.NewsletterSubscription)
		Get
			Return Me.GetTable(Of DataClasses.NewsletterSubscription)
		End Get
	End Property
	
	Public ReadOnly Property OrderItemOptions() As System.Data.Linq.Table(Of DataClasses.OrderItemOption)
		Get
			Return Me.GetTable(Of DataClasses.OrderItemOption)
		End Get
	End Property
	
	Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of DataClasses.OrderItem)
		Get
			Return Me.GetTable(Of DataClasses.OrderItem)
		End Get
	End Property
	
	Public ReadOnly Property OrderMemos() As System.Data.Linq.Table(Of DataClasses.OrderMemo)
		Get
			Return Me.GetTable(Of DataClasses.OrderMemo)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of DataClasses.Order)
		Get
			Return Me.GetTable(Of DataClasses.Order)
		End Get
	End Property
	
	Public ReadOnly Property ProductOptions() As System.Data.Linq.Table(Of DataClasses.ProductOption)
		Get
			Return Me.GetTable(Of DataClasses.ProductOption)
		End Get
	End Property
	
	Public ReadOnly Property ProductOptionValues() As System.Data.Linq.Table(Of DataClasses.ProductOptionValue)
		Get
			Return Me.GetTable(Of DataClasses.ProductOptionValue)
		End Get
	End Property
	
	Public ReadOnly Property ProductPriceRanges() As System.Data.Linq.Table(Of DataClasses.ProductPriceRange)
		Get
			Return Me.GetTable(Of DataClasses.ProductPriceRange)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of DataClasses.Product)
		Get
			Return Me.GetTable(Of DataClasses.Product)
		End Get
	End Property
	
	Public ReadOnly Property Settings() As System.Data.Linq.Table(Of DataClasses.Setting)
		Get
			Return Me.GetTable(Of DataClasses.Setting)
		End Get
	End Property
	
	Public ReadOnly Property SiteCategories() As System.Data.Linq.Table(Of DataClasses.SiteCategory)
		Get
			Return Me.GetTable(Of DataClasses.SiteCategory)
		End Get
	End Property
	
	Public ReadOnly Property SiteProducts() As System.Data.Linq.Table(Of DataClasses.SiteProduct)
		Get
			Return Me.GetTable(Of DataClasses.SiteProduct)
		End Get
	End Property
	
	Public ReadOnly Property Sites() As System.Data.Linq.Table(Of DataClasses.Site)
		Get
			Return Me.GetTable(Of DataClasses.Site)
		End Get
	End Property
	
	Public ReadOnly Property States() As System.Data.Linq.Table(Of DataClasses.State)
		Get
			Return Me.GetTable(Of DataClasses.State)
		End Get
	End Property
	
	Public ReadOnly Property TaxRates() As System.Data.Linq.Table(Of DataClasses.TaxRate)
		Get
			Return Me.GetTable(Of DataClasses.TaxRate)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of DataClasses.User)
		Get
			Return Me.GetTable(Of DataClasses.User)
		End Get
	End Property
End Class

Namespace DataClasses
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")>  _
	Partial Public Class Category
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CategoryID As Integer
		
		Private _ParentID As System.Nullable(Of Integer)
		
		Private _CategoryName As String
		
		Private _Description As String
		
		Private _MiniDescription As String
		
		Private _DateCreated As Date
		
		Private _DateModified As Date
		
		Private _ImagePath1 As String
		
		Private _ImagePath2 As String
		
		Private _ImagePath3 As String
		
		Private _ImagePath4 As String
		
		Private _SEOSlug As String
		
		Private _SEOTitle As String
		
		Private _SEODescription As String
		
		Private _SEOKeywords As String
		
		Private _SortOrder As System.Nullable(Of Integer)
		
		Private _Featured As String
		
		Private _Status As String
		
		Private _Categories As EntitySet(Of Category)
		
		Private _Products As EntitySet(Of Product)
		
		Private _SiteCategories As EntitySet(Of SiteCategory)
		
		Private _Category As EntityRef(Of Category)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnMiniDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMiniDescriptionChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    Partial Private Sub OnImagePath1Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath1Changed()
    End Sub
    Partial Private Sub OnImagePath2Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath2Changed()
    End Sub
    Partial Private Sub OnImagePath3Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath3Changed()
    End Sub
    Partial Private Sub OnImagePath4Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath4Changed()
    End Sub
    Partial Private Sub OnSEOSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSEOSlugChanged()
    End Sub
    Partial Private Sub OnSEOTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSEOTitleChanged()
    End Sub
    Partial Private Sub OnSEODescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSEODescriptionChanged()
    End Sub
    Partial Private Sub OnSEOKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnSEOKeywordsChanged()
    End Sub
    Partial Private Sub OnSortOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSortOrderChanged()
    End Sub
    Partial Private Sub OnFeaturedChanging(value As String)
    End Sub
    Partial Private Sub OnFeaturedChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Categories = New EntitySet(Of Category)(AddressOf Me.attach_Categories, AddressOf Me.detach_Categories)
			Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
			Me._SiteCategories = New EntitySet(Of SiteCategory)(AddressOf Me.attach_SiteCategories, AddressOf Me.detach_SiteCategories)
			Me._Category = CType(Nothing, EntityRef(Of Category))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set
				If ((Me._CategoryID = value)  _
							= false) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
		Public Property ParentID() As System.Nullable(Of Integer)
			Get
				Return Me._ParentID
			End Get
			Set
				If (Me._ParentID.Equals(value) = false) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnParentIDChanging(value)
					Me.SendPropertyChanging
					Me._ParentID = value
					Me.SendPropertyChanged("ParentID")
					Me.OnParentIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set
				If (String.Equals(Me._CategoryName, value) = false) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(6000)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiniDescription", DbType:="VarChar(2000)")>  _
		Public Property MiniDescription() As String
			Get
				Return Me._MiniDescription
			End Get
			Set
				If (String.Equals(Me._MiniDescription, value) = false) Then
					Me.OnMiniDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._MiniDescription = value
					Me.SendPropertyChanged("MiniDescription")
					Me.OnMiniDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
		Public Property DateCreated() As Date
			Get
				Return Me._DateCreated
			End Get
			Set
				If ((Me._DateCreated = value)  _
							= false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateModified", DbType:="DateTime NOT NULL")>  _
		Public Property DateModified() As Date
			Get
				Return Me._DateModified
			End Get
			Set
				If ((Me._DateModified = value)  _
							= false) Then
					Me.OnDateModifiedChanging(value)
					Me.SendPropertyChanging
					Me._DateModified = value
					Me.SendPropertyChanged("DateModified")
					Me.OnDateModifiedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath1", DbType:="VarChar(255)")>  _
		Public Property ImagePath1() As String
			Get
				Return Me._ImagePath1
			End Get
			Set
				If (String.Equals(Me._ImagePath1, value) = false) Then
					Me.OnImagePath1Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath1 = value
					Me.SendPropertyChanged("ImagePath1")
					Me.OnImagePath1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath2", DbType:="VarChar(255)")>  _
		Public Property ImagePath2() As String
			Get
				Return Me._ImagePath2
			End Get
			Set
				If (String.Equals(Me._ImagePath2, value) = false) Then
					Me.OnImagePath2Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath2 = value
					Me.SendPropertyChanged("ImagePath2")
					Me.OnImagePath2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath3", DbType:="VarChar(255)")>  _
		Public Property ImagePath3() As String
			Get
				Return Me._ImagePath3
			End Get
			Set
				If (String.Equals(Me._ImagePath3, value) = false) Then
					Me.OnImagePath3Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath3 = value
					Me.SendPropertyChanged("ImagePath3")
					Me.OnImagePath3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath4", DbType:="VarChar(255)")>  _
		Public Property ImagePath4() As String
			Get
				Return Me._ImagePath4
			End Get
			Set
				If (String.Equals(Me._ImagePath4, value) = false) Then
					Me.OnImagePath4Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath4 = value
					Me.SendPropertyChanged("ImagePath4")
					Me.OnImagePath4Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEOSlug", DbType:="VarChar(255)")>  _
		Public Property SEOSlug() As String
			Get
				Return Me._SEOSlug
			End Get
			Set
				If (String.Equals(Me._SEOSlug, value) = false) Then
					Me.OnSEOSlugChanging(value)
					Me.SendPropertyChanging
					Me._SEOSlug = value
					Me.SendPropertyChanged("SEOSlug")
					Me.OnSEOSlugChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEOTitle", DbType:="VarChar(255)")>  _
		Public Property SEOTitle() As String
			Get
				Return Me._SEOTitle
			End Get
			Set
				If (String.Equals(Me._SEOTitle, value) = false) Then
					Me.OnSEOTitleChanging(value)
					Me.SendPropertyChanging
					Me._SEOTitle = value
					Me.SendPropertyChanged("SEOTitle")
					Me.OnSEOTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEODescription", DbType:="VarChar(255)")>  _
		Public Property SEODescription() As String
			Get
				Return Me._SEODescription
			End Get
			Set
				If (String.Equals(Me._SEODescription, value) = false) Then
					Me.OnSEODescriptionChanging(value)
					Me.SendPropertyChanging
					Me._SEODescription = value
					Me.SendPropertyChanged("SEODescription")
					Me.OnSEODescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEOKeywords", DbType:="VarChar(255)")>  _
		Public Property SEOKeywords() As String
			Get
				Return Me._SEOKeywords
			End Get
			Set
				If (String.Equals(Me._SEOKeywords, value) = false) Then
					Me.OnSEOKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._SEOKeywords = value
					Me.SendPropertyChanged("SEOKeywords")
					Me.OnSEOKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortOrder", DbType:="Int")>  _
		Public Property SortOrder() As System.Nullable(Of Integer)
			Get
				Return Me._SortOrder
			End Get
			Set
				If (Me._SortOrder.Equals(value) = false) Then
					Me.OnSortOrderChanging(value)
					Me.SendPropertyChanging
					Me._SortOrder = value
					Me.SendPropertyChanged("SortOrder")
					Me.OnSortOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Featured", DbType:="VarChar(50)")>  _
		Public Property Featured() As String
			Get
				Return Me._Featured
			End Get
			Set
				If (String.Equals(Me._Featured, value) = false) Then
					Me.OnFeaturedChanging(value)
					Me.SendPropertyChanging
					Me._Featured = value
					Me.SendPropertyChanged("Featured")
					Me.OnFeaturedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Category", Storage:="_Categories", ThisKey:="CategoryID", OtherKey:="ParentID")>  _
		Public Property Categories() As EntitySet(Of Category)
			Get
				Return Me._Categories
			End Get
			Set
				Me._Categories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")>  _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set
				Me._Products.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_SiteCategory", Storage:="_SiteCategories", ThisKey:="CategoryID", OtherKey:="CategoryID")>  _
		Public Property SiteCategories() As EntitySet(Of SiteCategory)
			Get
				Return Me._SiteCategories
			End Get
			Set
				Me._SiteCategories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Category", Storage:="_Category", ThisKey:="ParentID", OtherKey:="CategoryID", IsForeignKey:=true)>  _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set
				Dim previousValue As Category = Me._Category.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Category.Entity = Nothing
						previousValue.Categories.Remove(Me)
					End If
					Me._Category.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Categories.Add(Me)
						Me._ParentID = value.CategoryID
					Else
						Me._ParentID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Categories(ByVal entity As Category)
			Me.SendPropertyChanging
			entity.Category = Me
		End Sub
		
		Private Sub detach_Categories(ByVal entity As Category)
			Me.SendPropertyChanging
			entity.Category = Nothing
		End Sub
		
		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Category = Me
		End Sub
		
		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging
			entity.Category = Nothing
		End Sub
		
		Private Sub attach_SiteCategories(ByVal entity As SiteCategory)
			Me.SendPropertyChanging
			entity.Category = Me
		End Sub
		
		Private Sub detach_SiteCategories(ByVal entity As SiteCategory)
			Me.SendPropertyChanging
			entity.Category = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Coupons")>  _
	Partial Public Class Coupon
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CouponID As Integer
		
		Private _CouponCode As String
		
		Private _CouponName As String
		
		Private _Description As String
		
		Private _Percentage As System.Nullable(Of Decimal)
		
		Private _Amount As System.Nullable(Of Decimal)
		
		Private _ExpirationDate As System.Nullable(Of Date)
		
		Private _Active As Short
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Orders As EntitySet(Of [Order])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCouponIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCouponIDChanged()
    End Sub
    Partial Private Sub OnCouponCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCouponCodeChanged()
    End Sub
    Partial Private Sub OnCouponNameChanging(value As String)
    End Sub
    Partial Private Sub OnCouponNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPercentageChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnExpirationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpirationDateChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property CouponID() As Integer
			Get
				Return Me._CouponID
			End Get
			Set
				If ((Me._CouponID = value)  _
							= false) Then
					Me.OnCouponIDChanging(value)
					Me.SendPropertyChanging
					Me._CouponID = value
					Me.SendPropertyChanged("CouponID")
					Me.OnCouponIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CouponCode() As String
			Get
				Return Me._CouponCode
			End Get
			Set
				If (String.Equals(Me._CouponCode, value) = false) Then
					Me.OnCouponCodeChanging(value)
					Me.SendPropertyChanging
					Me._CouponCode = value
					Me.SendPropertyChanged("CouponCode")
					Me.OnCouponCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CouponName() As String
			Get
				Return Me._CouponName
			End Get
			Set
				If (String.Equals(Me._CouponName, value) = false) Then
					Me.OnCouponNameChanging(value)
					Me.SendPropertyChanging
					Me._CouponName = value
					Me.SendPropertyChanged("CouponName")
					Me.OnCouponNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(4000)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percentage", DbType:="Decimal(18,4)")>  _
		Public Property Percentage() As System.Nullable(Of Decimal)
			Get
				Return Me._Percentage
			End Get
			Set
				If (Me._Percentage.Equals(value) = false) Then
					Me.OnPercentageChanging(value)
					Me.SendPropertyChanging
					Me._Percentage = value
					Me.SendPropertyChanged("Percentage")
					Me.OnPercentageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
		Public Property Amount() As System.Nullable(Of Decimal)
			Get
				Return Me._Amount
			End Get
			Set
				If (Me._Amount.Equals(value) = false) Then
					Me.OnAmountChanging(value)
					Me.SendPropertyChanging
					Me._Amount = value
					Me.SendPropertyChanged("Amount")
					Me.OnAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpirationDate", DbType:="DateTime")>  _
		Public Property ExpirationDate() As System.Nullable(Of Date)
			Get
				Return Me._ExpirationDate
			End Get
			Set
				If (Me._ExpirationDate.Equals(value) = false) Then
					Me.OnExpirationDateChanging(value)
					Me.SendPropertyChanging
					Me._ExpirationDate = value
					Me.SendPropertyChanged("ExpirationDate")
					Me.OnExpirationDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="SmallInt NOT NULL")>  _
		Public Property Active() As Short
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Coupon_Order", Storage:="_Orders", ThisKey:="CouponID", OtherKey:="CouponID")>  _
		Public Property Orders() As EntitySet(Of [Order])
			Get
				Return Me._Orders
			End Get
			Set
				Me._Orders.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Coupon = Me
		End Sub
		
		Private Sub detach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Coupon = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomContent")>  _
	Partial Public Class CustomContent
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ContentID As Integer
		
		Private _SiteID As System.Nullable(Of Integer)
		
		Private _Title As String
		
		Private _Content As String
		
		Private _Active As System.Nullable(Of Integer)
		
		Private _DateCreated As System.Nullable(Of Date)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContentIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnContentChanging(value As String)
    End Sub
    Partial Private Sub OnContentChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ContentID() As Integer
			Get
				Return Me._ContentID
			End Get
			Set
				If ((Me._ContentID = value)  _
							= false) Then
					Me.OnContentIDChanging(value)
					Me.SendPropertyChanging
					Me._ContentID = value
					Me.SendPropertyChanged("ContentID")
					Me.OnContentIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int")>  _
		Public Property SiteID() As System.Nullable(Of Integer)
			Get
				Return Me._SiteID
			End Get
			Set
				If (Me._SiteID.Equals(value) = false) Then
					Me.OnSiteIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteID = value
					Me.SendPropertyChanged("SiteID")
					Me.OnSiteIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(255)")>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Content", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Content() As String
			Get
				Return Me._Content
			End Get
			Set
				If (String.Equals(Me._Content, value) = false) Then
					Me.OnContentChanging(value)
					Me.SendPropertyChanging
					Me._Content = value
					Me.SendPropertyChanged("Content")
					Me.OnContentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Int")>  _
		Public Property Active() As System.Nullable(Of Integer)
			Get
				Return Me._Active
			End Get
			Set
				If (Me._Active.Equals(value) = false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
		Public Property DateCreated() As System.Nullable(Of Date)
			Get
				Return Me._DateCreated
			End Get
			Set
				If (Me._DateCreated.Equals(value) = false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.dtproperties")>  _
	Partial Public Class dtproperty
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _id As Integer
		
		Private _objectid As System.Nullable(Of Integer)
		
		Private _property As String
		
		Private _value As String
		
		Private _uvalue As String
		
		Private _lvalue As System.Data.Linq.Binary
		
		Private _version As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnobjectidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnobjectidChanged()
    End Sub
    Partial Private Sub OnpropertyChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyChanged()
    End Sub
    Partial Private Sub OnvalueChanging(value As String)
    End Sub
    Partial Private Sub OnvalueChanged()
    End Sub
    Partial Private Sub OnuvalueChanging(value As String)
    End Sub
    Partial Private Sub OnuvalueChanged()
    End Sub
    Partial Private Sub OnlvalueChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnlvalueChanged()
    End Sub
    Partial Private Sub OnversionChanging(value As Integer)
    End Sub
    Partial Private Sub OnversionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property id() As Integer
			Get
				Return Me._id
			End Get
			Set
				If ((Me._id = value)  _
							= false) Then
					Me.OnidChanging(value)
					Me.SendPropertyChanging
					Me._id = value
					Me.SendPropertyChanged("id")
					Me.OnidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_objectid", DbType:="Int")>  _
		Public Property objectid() As System.Nullable(Of Integer)
			Get
				Return Me._objectid
			End Get
			Set
				If (Me._objectid.Equals(value) = false) Then
					Me.OnobjectidChanging(value)
					Me.SendPropertyChanging
					Me._objectid = value
					Me.SendPropertyChanged("objectid")
					Me.OnobjectidChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="property", Storage:="_property", DbType:="VarChar(64) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property [property]() As String
			Get
				Return Me._property
			End Get
			Set
				If (String.Equals(Me._property, value) = false) Then
					Me.OnpropertyChanging(value)
					Me.SendPropertyChanging
					Me._property = value
					Me.SendPropertyChanged("[property]")
					Me.OnpropertyChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="VarChar(255)")>  _
		Public Property value() As String
			Get
				Return Me._value
			End Get
			Set
				If (String.Equals(Me._value, value) = false) Then
					Me.OnvalueChanging(value)
					Me.SendPropertyChanging
					Me._value = value
					Me.SendPropertyChanged("value")
					Me.OnvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uvalue", DbType:="NVarChar(255)")>  _
		Public Property uvalue() As String
			Get
				Return Me._uvalue
			End Get
			Set
				If (String.Equals(Me._uvalue, value) = false) Then
					Me.OnuvalueChanging(value)
					Me.SendPropertyChanging
					Me._uvalue = value
					Me.SendPropertyChanged("uvalue")
					Me.OnuvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lvalue", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property lvalue() As System.Data.Linq.Binary
			Get
				Return Me._lvalue
			End Get
			Set
				If (Object.Equals(Me._lvalue, value) = false) Then
					Me.OnlvalueChanging(value)
					Me.SendPropertyChanging
					Me._lvalue = value
					Me.SendPropertyChanged("lvalue")
					Me.OnlvalueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_version", DbType:="Int NOT NULL")>  _
		Public Property version() As Integer
			Get
				Return Me._version
			End Get
			Set
				If ((Me._version = value)  _
							= false) Then
					Me.OnversionChanging(value)
					Me.SendPropertyChanging
					Me._version = value
					Me.SendPropertyChanged("version")
					Me.OnversionChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NewsletterSubscriptions")>  _
	Partial Public Class NewsletterSubscription
		
		Private _SiteID As Integer
		
		Private _Email As String
		
		Private _Name As String
		
		Private _SignupDate As Date
		
		Private _SignupIP As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int NOT NULL")>  _
		Public Property SiteID() As Integer
			Get
				Return Me._SiteID
			End Get
			Set
				If ((Me._SiteID = value)  _
							= false) Then
					Me._SiteID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(150)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me._Name = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignupDate", DbType:="DateTime NOT NULL")>  _
		Public Property SignupDate() As Date
			Get
				Return Me._SignupDate
			End Get
			Set
				If ((Me._SignupDate = value)  _
							= false) Then
					Me._SignupDate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SignupIP", DbType:="VarChar(16) NOT NULL", CanBeNull:=false)>  _
		Public Property SignupIP() As String
			Get
				Return Me._SignupIP
			End Get
			Set
				If (String.Equals(Me._SignupIP, value) = false) Then
					Me._SignupIP = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderItemOptions")>  _
	Partial Public Class OrderItemOption
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _OrderItemOptionID As Integer
		
		Private _OrderItemID As Integer
		
		Private _ProductOptionID As Integer
		
		Private _ProductOptionValueID As Integer
		
		Private _OptionName As String
		
		Private _ValueName As String
		
		Private _SKU As String
		
		Private _PriceDifference As Decimal
		
		Private _WeightDifference As System.Nullable(Of Decimal)
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _OrderItem As EntityRef(Of OrderItem)
		
		Private _ProductOption As EntityRef(Of ProductOption)
		
		Private _ProductOptionValue As EntityRef(Of ProductOptionValue)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderItemOptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderItemOptionIDChanged()
    End Sub
    Partial Private Sub OnOrderItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderItemIDChanged()
    End Sub
    Partial Private Sub OnProductOptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductOptionIDChanged()
    End Sub
    Partial Private Sub OnProductOptionValueIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductOptionValueIDChanged()
    End Sub
    Partial Private Sub OnOptionNameChanging(value As String)
    End Sub
    Partial Private Sub OnOptionNameChanged()
    End Sub
    Partial Private Sub OnValueNameChanging(value As String)
    End Sub
    Partial Private Sub OnValueNameChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnPriceDifferenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceDifferenceChanged()
    End Sub
    Partial Private Sub OnWeightDifferenceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnWeightDifferenceChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItem = CType(Nothing, EntityRef(Of OrderItem))
			Me._ProductOption = CType(Nothing, EntityRef(Of ProductOption))
			Me._ProductOptionValue = CType(Nothing, EntityRef(Of ProductOptionValue))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderItemOptionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property OrderItemOptionID() As Integer
			Get
				Return Me._OrderItemOptionID
			End Get
			Set
				If ((Me._OrderItemOptionID = value)  _
							= false) Then
					Me.OnOrderItemOptionIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderItemOptionID = value
					Me.SendPropertyChanged("OrderItemOptionID")
					Me.OnOrderItemOptionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderItemID", DbType:="Int NOT NULL")>  _
		Public Property OrderItemID() As Integer
			Get
				Return Me._OrderItemID
			End Get
			Set
				If ((Me._OrderItemID = value)  _
							= false) Then
					If Me._OrderItem.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderItemIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderItemID = value
					Me.SendPropertyChanged("OrderItemID")
					Me.OnOrderItemIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductOptionID", DbType:="Int NOT NULL")>  _
		Public Property ProductOptionID() As Integer
			Get
				Return Me._ProductOptionID
			End Get
			Set
				If ((Me._ProductOptionID = value)  _
							= false) Then
					If Me._ProductOption.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductOptionIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductOptionID = value
					Me.SendPropertyChanged("ProductOptionID")
					Me.OnProductOptionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductOptionValueID", DbType:="Int NOT NULL")>  _
		Public Property ProductOptionValueID() As Integer
			Get
				Return Me._ProductOptionValueID
			End Get
			Set
				If ((Me._ProductOptionValueID = value)  _
							= false) Then
					If Me._ProductOptionValue.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductOptionValueIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductOptionValueID = value
					Me.SendPropertyChanged("ProductOptionValueID")
					Me.OnProductOptionValueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptionName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property OptionName() As String
			Get
				Return Me._OptionName
			End Get
			Set
				If (String.Equals(Me._OptionName, value) = false) Then
					Me.OnOptionNameChanging(value)
					Me.SendPropertyChanging
					Me._OptionName = value
					Me.SendPropertyChanged("OptionName")
					Me.OnOptionNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ValueName() As String
			Get
				Return Me._ValueName
			End Get
			Set
				If (String.Equals(Me._ValueName, value) = false) Then
					Me.OnValueNameChanging(value)
					Me.SendPropertyChanging
					Me._ValueName = value
					Me.SendPropertyChanged("ValueName")
					Me.OnValueNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="VarChar(50)")>  _
		Public Property SKU() As String
			Get
				Return Me._SKU
			End Get
			Set
				If (String.Equals(Me._SKU, value) = false) Then
					Me.OnSKUChanging(value)
					Me.SendPropertyChanging
					Me._SKU = value
					Me.SendPropertyChanged("SKU")
					Me.OnSKUChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceDifference", DbType:="Money NOT NULL")>  _
		Public Property PriceDifference() As Decimal
			Get
				Return Me._PriceDifference
			End Get
			Set
				If ((Me._PriceDifference = value)  _
							= false) Then
					Me.OnPriceDifferenceChanging(value)
					Me.SendPropertyChanging
					Me._PriceDifference = value
					Me.SendPropertyChanged("PriceDifference")
					Me.OnPriceDifferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightDifference", DbType:="Decimal(18,4)")>  _
		Public Property WeightDifference() As System.Nullable(Of Decimal)
			Get
				Return Me._WeightDifference
			End Get
			Set
				If (Me._WeightDifference.Equals(value) = false) Then
					Me.OnWeightDifferenceChanging(value)
					Me.SendPropertyChanging
					Me._WeightDifference = value
					Me.SendPropertyChanged("WeightDifference")
					Me.OnWeightDifferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_OrderItemOption", Storage:="_OrderItem", ThisKey:="OrderItemID", OtherKey:="OrderItemID", IsForeignKey:=true)>  _
		Public Property OrderItem() As OrderItem
			Get
				Return Me._OrderItem.Entity
			End Get
			Set
				Dim previousValue As OrderItem = Me._OrderItem.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._OrderItem.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._OrderItem.Entity = Nothing
						previousValue.OrderItemOptions.Remove(Me)
					End If
					Me._OrderItem.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItemOptions.Add(Me)
						Me._OrderItemID = value.OrderItemID
					Else
						Me._OrderItemID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("OrderItem")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOption_OrderItemOption", Storage:="_ProductOption", ThisKey:="ProductOptionID", OtherKey:="ProductOptionID", IsForeignKey:=true)>  _
		Public Property ProductOption() As ProductOption
			Get
				Return Me._ProductOption.Entity
			End Get
			Set
				Dim previousValue As ProductOption = Me._ProductOption.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ProductOption.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ProductOption.Entity = Nothing
						previousValue.OrderItemOptions.Remove(Me)
					End If
					Me._ProductOption.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItemOptions.Add(Me)
						Me._ProductOptionID = value.ProductOptionID
					Else
						Me._ProductOptionID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ProductOption")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOptionValue_OrderItemOption", Storage:="_ProductOptionValue", ThisKey:="ProductOptionValueID", OtherKey:="ProductOptionValueID", IsForeignKey:=true)>  _
		Public Property ProductOptionValue() As ProductOptionValue
			Get
				Return Me._ProductOptionValue.Entity
			End Get
			Set
				Dim previousValue As ProductOptionValue = Me._ProductOptionValue.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ProductOptionValue.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ProductOptionValue.Entity = Nothing
						previousValue.OrderItemOptions.Remove(Me)
					End If
					Me._ProductOptionValue.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItemOptions.Add(Me)
						Me._ProductOptionValueID = value.ProductOptionValueID
					Else
						Me._ProductOptionValueID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ProductOptionValue")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderItems")>  _
	Partial Public Class OrderItem
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _OrderItemID As Integer
		
		Private _OrderID As Integer
		
		Private _ProductID As Integer
		
		Private _ProductCode As String
		
		Private _ProductName As String
		
		Private _Cost As Decimal
		
		Private _RetailPrice As Decimal
		
		Private _OriginalPrice As Decimal
		
		Private _Weight As Decimal
		
		Private _Quantity As Integer
		
		Private _Total As Decimal
		
		Private _ShipDate As System.Nullable(Of Date)
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _OrderItemOptions As EntitySet(Of OrderItemOption)
		
		Private _Order As EntityRef(Of [Order])
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderItemIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnRetailPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRetailPriceChanged()
    End Sub
    Partial Private Sub OnOriginalPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnOriginalPriceChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItemOptions = New EntitySet(Of OrderItemOption)(AddressOf Me.attach_OrderItemOptions, AddressOf Me.detach_OrderItemOptions)
			Me._Order = CType(Nothing, EntityRef(Of [Order]))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderItemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property OrderItemID() As Integer
			Get
				Return Me._OrderItemID
			End Get
			Set
				If ((Me._OrderItemID = value)  _
							= false) Then
					Me.OnOrderItemIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderItemID = value
					Me.SendPropertyChanged("OrderItemID")
					Me.OnOrderItemIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ProductCode() As String
			Get
				Return Me._ProductCode
			End Get
			Set
				If (String.Equals(Me._ProductCode, value) = false) Then
					Me.OnProductCodeChanging(value)
					Me.SendPropertyChanging
					Me._ProductCode = value
					Me.SendPropertyChanged("ProductCode")
					Me.OnProductCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set
				If (String.Equals(Me._ProductName, value) = false) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="Money NOT NULL")>  _
		Public Property Cost() As Decimal
			Get
				Return Me._Cost
			End Get
			Set
				If ((Me._Cost = value)  _
							= false) Then
					Me.OnCostChanging(value)
					Me.SendPropertyChanging
					Me._Cost = value
					Me.SendPropertyChanged("Cost")
					Me.OnCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetailPrice", DbType:="Money NOT NULL")>  _
		Public Property RetailPrice() As Decimal
			Get
				Return Me._RetailPrice
			End Get
			Set
				If ((Me._RetailPrice = value)  _
							= false) Then
					Me.OnRetailPriceChanging(value)
					Me.SendPropertyChanging
					Me._RetailPrice = value
					Me.SendPropertyChanged("RetailPrice")
					Me.OnRetailPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginalPrice", DbType:="Money NOT NULL")>  _
		Public Property OriginalPrice() As Decimal
			Get
				Return Me._OriginalPrice
			End Get
			Set
				If ((Me._OriginalPrice = value)  _
							= false) Then
					Me.OnOriginalPriceChanging(value)
					Me.SendPropertyChanging
					Me._OriginalPrice = value
					Me.SendPropertyChanged("OriginalPrice")
					Me.OnOriginalPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Weight() As Decimal
			Get
				Return Me._Weight
			End Get
			Set
				If ((Me._Weight = value)  _
							= false) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int NOT NULL")>  _
		Public Property Quantity() As Integer
			Get
				Return Me._Quantity
			End Get
			Set
				If ((Me._Quantity = value)  _
							= false) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Money NOT NULL")>  _
		Public Property Total() As Decimal
			Get
				Return Me._Total
			End Get
			Set
				If ((Me._Total = value)  _
							= false) Then
					Me.OnTotalChanging(value)
					Me.SendPropertyChanging
					Me._Total = value
					Me.SendPropertyChanged("Total")
					Me.OnTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>  _
		Public Property ShipDate() As System.Nullable(Of Date)
			Get
				Return Me._ShipDate
			End Get
			Set
				If (Me._ShipDate.Equals(value) = false) Then
					Me.OnShipDateChanging(value)
					Me.SendPropertyChanging
					Me._ShipDate = value
					Me.SendPropertyChanged("ShipDate")
					Me.OnShipDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrderItem_OrderItemOption", Storage:="_OrderItemOptions", ThisKey:="OrderItemID", OtherKey:="OrderItemID")>  _
		Public Property OrderItemOptions() As EntitySet(Of OrderItemOption)
			Get
				Return Me._OrderItemOptions
			End Get
			Set
				Me._OrderItemOptions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=true)>  _
		Public Property [Order]() As [Order]
			Get
				Return Me._Order.Entity
			End Get
			Set
				Dim previousValue As [Order] = Me._Order.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Order.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Order.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._OrderID = value.OrderID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Order]")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderItem", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.OrderItems.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderItems.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.OrderItem = Me
		End Sub
		
		Private Sub detach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.OrderItem = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderMemos")>  _
	Partial Public Class OrderMemo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _OrderMemoID As Integer
		
		Private _OrderID As Integer
		
		Private _Memo As String
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Order As EntityRef(Of [Order])
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderMemoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderMemoIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMemoChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Order = CType(Nothing, EntityRef(Of [Order]))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderMemoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property OrderMemoID() As Integer
			Get
				Return Me._OrderMemoID
			End Get
			Set
				If ((Me._OrderMemoID = value)  _
							= false) Then
					Me.OnOrderMemoIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderMemoID = value
					Me.SendPropertyChanged("OrderMemoID")
					Me.OnOrderMemoIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memo", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Memo() As String
			Get
				Return Me._Memo
			End Get
			Set
				If (String.Equals(Me._Memo, value) = false) Then
					Me.OnMemoChanging(value)
					Me.SendPropertyChanging
					Me._Memo = value
					Me.SendPropertyChanged("Memo")
					Me.OnMemoChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderMemo", Storage:="_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=true)>  _
		Public Property [Order]() As [Order]
			Get
				Return Me._Order.Entity
			End Get
			Set
				Dim previousValue As [Order] = Me._Order.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Order.Entity = Nothing
						previousValue.OrderMemos.Remove(Me)
					End If
					Me._Order.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.OrderMemos.Add(Me)
						Me._OrderID = value.OrderID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("[Order]")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")>  _
	Partial Public Class [Order]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _OrderID As Integer
		
		Private _SiteID As Integer
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _Address1 As String
		
		Private _Address2 As String
		
		Private _City As String
		
		Private _State As String
		
		Private _PostalCode As String
		
		Private _Country As String
		
		Private _Phone As String
		
		Private _ShipFirstName As String
		
		Private _ShipLastName As String
		
		Private _ShipAddress1 As String
		
		Private _ShipAddress2 As String
		
		Private _ShipCity As String
		
		Private _ShipState As String
		
		Private _ShipPostalCode As String
		
		Private _ShipCountry As String
		
		Private _ShipPhone As String
		
		Private _Email As String
		
		Private _Notes As String
		
		Private _PaymentMethod As String
		
		Private _CardType As String
		
		Private _CardNumber As String
		
		Private _CardSecurity As String
		
		Private _CardExpiration As System.Nullable(Of Date)
		
		Private _CardholderName As String
		
		Private _CardAuthCode As String
		
		Private _CardAuthTransID As String
		
		Private _CheckNumber As System.Nullable(Of Integer)
		
		Private _CheckSignatory As String
		
		Private _ShipCost As Decimal
		
		Private _ShipTracking As String
		
		Private _SalesTax As Decimal
		
		Private _SalesTaxPercent As System.Nullable(Of Decimal)
		
		Private _CouponID As System.Nullable(Of Integer)
		
		Private _CouponAmount As System.Nullable(Of Decimal)
		
		Private _CouponPercentage As System.Nullable(Of Decimal)
		
		Private _CouponDiscount As Decimal
		
		Private _SubTotal As Decimal
		
		Private _GrandTotal As Decimal
		
		Private _Status As String
		
		Private _StatusDate As Date
		
		Private _FirstShipDate As System.Nullable(Of Date)
		
		Private _LastShipDate As System.Nullable(Of Date)
		
		Private _PaidDate As System.Nullable(Of Date)
		
		Private _VoidDate As System.Nullable(Of Date)
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _OrderMemos As EntitySet(Of OrderMemo)
		
		Private _Coupon As EntityRef(Of Coupon)
		
		Private _Site As EntityRef(Of Site)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnShipFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnShipFirstNameChanged()
    End Sub
    Partial Private Sub OnShipLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnShipLastNameChanged()
    End Sub
    Partial Private Sub OnShipAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnShipAddress1Changed()
    End Sub
    Partial Private Sub OnShipAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnShipAddress2Changed()
    End Sub
    Partial Private Sub OnShipCityChanging(value As String)
    End Sub
    Partial Private Sub OnShipCityChanged()
    End Sub
    Partial Private Sub OnShipStateChanging(value As String)
    End Sub
    Partial Private Sub OnShipStateChanged()
    End Sub
    Partial Private Sub OnShipPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnShipPostalCodeChanged()
    End Sub
    Partial Private Sub OnShipCountryChanging(value As String)
    End Sub
    Partial Private Sub OnShipCountryChanged()
    End Sub
    Partial Private Sub OnShipPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnShipPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnPaymentMethodChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentMethodChanged()
    End Sub
    Partial Private Sub OnCardTypeChanging(value As String)
    End Sub
    Partial Private Sub OnCardTypeChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnCardSecurityChanging(value As String)
    End Sub
    Partial Private Sub OnCardSecurityChanged()
    End Sub
    Partial Private Sub OnCardExpirationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCardExpirationChanged()
    End Sub
    Partial Private Sub OnCardholderNameChanging(value As String)
    End Sub
    Partial Private Sub OnCardholderNameChanged()
    End Sub
    Partial Private Sub OnCardAuthCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCardAuthCodeChanged()
    End Sub
    Partial Private Sub OnCardAuthTransIDChanging(value As String)
    End Sub
    Partial Private Sub OnCardAuthTransIDChanged()
    End Sub
    Partial Private Sub OnCheckNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCheckNumberChanged()
    End Sub
    Partial Private Sub OnCheckSignatoryChanging(value As String)
    End Sub
    Partial Private Sub OnCheckSignatoryChanged()
    End Sub
    Partial Private Sub OnShipCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnShipCostChanged()
    End Sub
    Partial Private Sub OnShipTrackingChanging(value As String)
    End Sub
    Partial Private Sub OnShipTrackingChanged()
    End Sub
    Partial Private Sub OnSalesTaxChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSalesTaxChanged()
    End Sub
    Partial Private Sub OnSalesTaxPercentChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalesTaxPercentChanged()
    End Sub
    Partial Private Sub OnCouponIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCouponIDChanged()
    End Sub
    Partial Private Sub OnCouponAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCouponAmountChanged()
    End Sub
    Partial Private Sub OnCouponPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCouponPercentageChanged()
    End Sub
    Partial Private Sub OnCouponDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCouponDiscountChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnGrandTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnGrandTotalChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnStatusDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStatusDateChanged()
    End Sub
    Partial Private Sub OnFirstShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFirstShipDateChanged()
    End Sub
    Partial Private Sub OnLastShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastShipDateChanged()
    End Sub
    Partial Private Sub OnPaidDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPaidDateChanged()
    End Sub
    Partial Private Sub OnVoidDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnVoidDateChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._OrderMemos = New EntitySet(Of OrderMemo)(AddressOf Me.attach_OrderMemos, AddressOf Me.detach_OrderMemos)
			Me._Coupon = CType(Nothing, EntityRef(Of Coupon))
			Me._Site = CType(Nothing, EntityRef(Of Site))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set
				If ((Me._OrderID = value)  _
							= false) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int NOT NULL")>  _
		Public Property SiteID() As Integer
			Get
				Return Me._SiteID
			End Get
			Set
				If ((Me._SiteID = value)  _
							= false) Then
					If Me._Site.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSiteIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteID = value
					Me.SendPropertyChanged("SiteID")
					Me.OnSiteIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Address1() As String
			Get
				Return Me._Address1
			End Get
			Set
				If (String.Equals(Me._Address1, value) = false) Then
					Me.OnAddress1Changing(value)
					Me.SendPropertyChanging
					Me._Address1 = value
					Me.SendPropertyChanged("Address1")
					Me.OnAddress1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="VarChar(100)")>  _
		Public Property Address2() As String
			Get
				Return Me._Address2
			End Get
			Set
				If (String.Equals(Me._Address2, value) = false) Then
					Me.OnAddress2Changing(value)
					Me.SendPropertyChanging
					Me._Address2 = value
					Me.SendPropertyChanged("Address2")
					Me.OnAddress2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(2)")>  _
		Public Property State() As String
			Get
				Return Me._State
			End Get
			Set
				If (String.Equals(Me._State, value) = false) Then
					Me.OnStateChanging(value)
					Me.SendPropertyChanging
					Me._State = value
					Me.SendPropertyChanged("State")
					Me.OnStateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set
				If (String.Equals(Me._PostalCode, value) = false) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(25)")>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipFirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipFirstName() As String
			Get
				Return Me._ShipFirstName
			End Get
			Set
				If (String.Equals(Me._ShipFirstName, value) = false) Then
					Me.OnShipFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._ShipFirstName = value
					Me.SendPropertyChanged("ShipFirstName")
					Me.OnShipFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipLastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipLastName() As String
			Get
				Return Me._ShipLastName
			End Get
			Set
				If (String.Equals(Me._ShipLastName, value) = false) Then
					Me.OnShipLastNameChanging(value)
					Me.SendPropertyChanging
					Me._ShipLastName = value
					Me.SendPropertyChanged("ShipLastName")
					Me.OnShipLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress1", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipAddress1() As String
			Get
				Return Me._ShipAddress1
			End Get
			Set
				If (String.Equals(Me._ShipAddress1, value) = false) Then
					Me.OnShipAddress1Changing(value)
					Me.SendPropertyChanging
					Me._ShipAddress1 = value
					Me.SendPropertyChanged("ShipAddress1")
					Me.OnShipAddress1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress2", DbType:="VarChar(100)")>  _
		Public Property ShipAddress2() As String
			Get
				Return Me._ShipAddress2
			End Get
			Set
				If (String.Equals(Me._ShipAddress2, value) = false) Then
					Me.OnShipAddress2Changing(value)
					Me.SendPropertyChanging
					Me._ShipAddress2 = value
					Me.SendPropertyChanged("ShipAddress2")
					Me.OnShipAddress2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCity", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set
				If (String.Equals(Me._ShipCity, value) = false) Then
					Me.OnShipCityChanging(value)
					Me.SendPropertyChanging
					Me._ShipCity = value
					Me.SendPropertyChanged("ShipCity")
					Me.OnShipCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipState", DbType:="VarChar(2)")>  _
		Public Property ShipState() As String
			Get
				Return Me._ShipState
			End Get
			Set
				If (String.Equals(Me._ShipState, value) = false) Then
					Me.OnShipStateChanging(value)
					Me.SendPropertyChanging
					Me._ShipState = value
					Me.SendPropertyChanged("ShipState")
					Me.OnShipStateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPostalCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set
				If (String.Equals(Me._ShipPostalCode, value) = false) Then
					Me.OnShipPostalCodeChanging(value)
					Me.SendPropertyChanging
					Me._ShipPostalCode = value
					Me.SendPropertyChanged("ShipPostalCode")
					Me.OnShipPostalCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCountry", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set
				If (String.Equals(Me._ShipCountry, value) = false) Then
					Me.OnShipCountryChanging(value)
					Me.SendPropertyChanging
					Me._ShipCountry = value
					Me.SendPropertyChanged("ShipCountry")
					Me.OnShipCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPhone", DbType:="VarChar(25)")>  _
		Public Property ShipPhone() As String
			Get
				Return Me._ShipPhone
			End Get
			Set
				If (String.Equals(Me._ShipPhone, value) = false) Then
					Me.OnShipPhoneChanging(value)
					Me.SendPropertyChanging
					Me._ShipPhone = value
					Me.SendPropertyChanged("ShipPhone")
					Me.OnShipPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethod", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property PaymentMethod() As String
			Get
				Return Me._PaymentMethod
			End Get
			Set
				If (String.Equals(Me._PaymentMethod, value) = false) Then
					Me.OnPaymentMethodChanging(value)
					Me.SendPropertyChanging
					Me._PaymentMethod = value
					Me.SendPropertyChanged("PaymentMethod")
					Me.OnPaymentMethodChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardType", DbType:="VarChar(20)")>  _
		Public Property CardType() As String
			Get
				Return Me._CardType
			End Get
			Set
				If (String.Equals(Me._CardType, value) = false) Then
					Me.OnCardTypeChanging(value)
					Me.SendPropertyChanging
					Me._CardType = value
					Me.SendPropertyChanged("CardType")
					Me.OnCardTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="VarChar(20)")>  _
		Public Property CardNumber() As String
			Get
				Return Me._CardNumber
			End Get
			Set
				If (String.Equals(Me._CardNumber, value) = false) Then
					Me.OnCardNumberChanging(value)
					Me.SendPropertyChanging
					Me._CardNumber = value
					Me.SendPropertyChanged("CardNumber")
					Me.OnCardNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardSecurity", DbType:="VarChar(10)")>  _
		Public Property CardSecurity() As String
			Get
				Return Me._CardSecurity
			End Get
			Set
				If (String.Equals(Me._CardSecurity, value) = false) Then
					Me.OnCardSecurityChanging(value)
					Me.SendPropertyChanging
					Me._CardSecurity = value
					Me.SendPropertyChanged("CardSecurity")
					Me.OnCardSecurityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardExpiration", DbType:="DateTime")>  _
		Public Property CardExpiration() As System.Nullable(Of Date)
			Get
				Return Me._CardExpiration
			End Get
			Set
				If (Me._CardExpiration.Equals(value) = false) Then
					Me.OnCardExpirationChanging(value)
					Me.SendPropertyChanging
					Me._CardExpiration = value
					Me.SendPropertyChanged("CardExpiration")
					Me.OnCardExpirationChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardholderName", DbType:="VarChar(100)")>  _
		Public Property CardholderName() As String
			Get
				Return Me._CardholderName
			End Get
			Set
				If (String.Equals(Me._CardholderName, value) = false) Then
					Me.OnCardholderNameChanging(value)
					Me.SendPropertyChanging
					Me._CardholderName = value
					Me.SendPropertyChanged("CardholderName")
					Me.OnCardholderNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardAuthCode", DbType:="VarChar(20)")>  _
		Public Property CardAuthCode() As String
			Get
				Return Me._CardAuthCode
			End Get
			Set
				If (String.Equals(Me._CardAuthCode, value) = false) Then
					Me.OnCardAuthCodeChanging(value)
					Me.SendPropertyChanging
					Me._CardAuthCode = value
					Me.SendPropertyChanged("CardAuthCode")
					Me.OnCardAuthCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardAuthTransID", DbType:="VarChar(20)")>  _
		Public Property CardAuthTransID() As String
			Get
				Return Me._CardAuthTransID
			End Get
			Set
				If (String.Equals(Me._CardAuthTransID, value) = false) Then
					Me.OnCardAuthTransIDChanging(value)
					Me.SendPropertyChanging
					Me._CardAuthTransID = value
					Me.SendPropertyChanged("CardAuthTransID")
					Me.OnCardAuthTransIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckNumber", DbType:="Int")>  _
		Public Property CheckNumber() As System.Nullable(Of Integer)
			Get
				Return Me._CheckNumber
			End Get
			Set
				If (Me._CheckNumber.Equals(value) = false) Then
					Me.OnCheckNumberChanging(value)
					Me.SendPropertyChanging
					Me._CheckNumber = value
					Me.SendPropertyChanged("CheckNumber")
					Me.OnCheckNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckSignatory", DbType:="VarChar(100)")>  _
		Public Property CheckSignatory() As String
			Get
				Return Me._CheckSignatory
			End Get
			Set
				If (String.Equals(Me._CheckSignatory, value) = false) Then
					Me.OnCheckSignatoryChanging(value)
					Me.SendPropertyChanging
					Me._CheckSignatory = value
					Me.SendPropertyChanged("CheckSignatory")
					Me.OnCheckSignatoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCost", DbType:="Money NOT NULL")>  _
		Public Property ShipCost() As Decimal
			Get
				Return Me._ShipCost
			End Get
			Set
				If ((Me._ShipCost = value)  _
							= false) Then
					Me.OnShipCostChanging(value)
					Me.SendPropertyChanging
					Me._ShipCost = value
					Me.SendPropertyChanged("ShipCost")
					Me.OnShipCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipTracking", DbType:="VarChar(50)")>  _
		Public Property ShipTracking() As String
			Get
				Return Me._ShipTracking
			End Get
			Set
				If (String.Equals(Me._ShipTracking, value) = false) Then
					Me.OnShipTrackingChanging(value)
					Me.SendPropertyChanging
					Me._ShipTracking = value
					Me.SendPropertyChanged("ShipTracking")
					Me.OnShipTrackingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesTax", DbType:="Money NOT NULL")>  _
		Public Property SalesTax() As Decimal
			Get
				Return Me._SalesTax
			End Get
			Set
				If ((Me._SalesTax = value)  _
							= false) Then
					Me.OnSalesTaxChanging(value)
					Me.SendPropertyChanging
					Me._SalesTax = value
					Me.SendPropertyChanged("SalesTax")
					Me.OnSalesTaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesTaxPercent", DbType:="Decimal(18,4)")>  _
		Public Property SalesTaxPercent() As System.Nullable(Of Decimal)
			Get
				Return Me._SalesTaxPercent
			End Get
			Set
				If (Me._SalesTaxPercent.Equals(value) = false) Then
					Me.OnSalesTaxPercentChanging(value)
					Me.SendPropertyChanging
					Me._SalesTaxPercent = value
					Me.SendPropertyChanged("SalesTaxPercent")
					Me.OnSalesTaxPercentChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponID", DbType:="Int")>  _
		Public Property CouponID() As System.Nullable(Of Integer)
			Get
				Return Me._CouponID
			End Get
			Set
				If (Me._CouponID.Equals(value) = false) Then
					If Me._Coupon.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCouponIDChanging(value)
					Me.SendPropertyChanging
					Me._CouponID = value
					Me.SendPropertyChanged("CouponID")
					Me.OnCouponIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponAmount", DbType:="Money")>  _
		Public Property CouponAmount() As System.Nullable(Of Decimal)
			Get
				Return Me._CouponAmount
			End Get
			Set
				If (Me._CouponAmount.Equals(value) = false) Then
					Me.OnCouponAmountChanging(value)
					Me.SendPropertyChanging
					Me._CouponAmount = value
					Me.SendPropertyChanged("CouponAmount")
					Me.OnCouponAmountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponPercentage", DbType:="Decimal(18,4)")>  _
		Public Property CouponPercentage() As System.Nullable(Of Decimal)
			Get
				Return Me._CouponPercentage
			End Get
			Set
				If (Me._CouponPercentage.Equals(value) = false) Then
					Me.OnCouponPercentageChanging(value)
					Me.SendPropertyChanging
					Me._CouponPercentage = value
					Me.SendPropertyChanged("CouponPercentage")
					Me.OnCouponPercentageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CouponDiscount", DbType:="Money NOT NULL")>  _
		Public Property CouponDiscount() As Decimal
			Get
				Return Me._CouponDiscount
			End Get
			Set
				If ((Me._CouponDiscount = value)  _
							= false) Then
					Me.OnCouponDiscountChanging(value)
					Me.SendPropertyChanging
					Me._CouponDiscount = value
					Me.SendPropertyChanged("CouponDiscount")
					Me.OnCouponDiscountChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Money NOT NULL")>  _
		Public Property SubTotal() As Decimal
			Get
				Return Me._SubTotal
			End Get
			Set
				If ((Me._SubTotal = value)  _
							= false) Then
					Me.OnSubTotalChanging(value)
					Me.SendPropertyChanging
					Me._SubTotal = value
					Me.SendPropertyChanged("SubTotal")
					Me.OnSubTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GrandTotal", DbType:="Money NOT NULL")>  _
		Public Property GrandTotal() As Decimal
			Get
				Return Me._GrandTotal
			End Get
			Set
				If ((Me._GrandTotal = value)  _
							= false) Then
					Me.OnGrandTotalChanging(value)
					Me.SendPropertyChanging
					Me._GrandTotal = value
					Me.SendPropertyChanged("GrandTotal")
					Me.OnGrandTotalChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusDate", DbType:="DateTime NOT NULL")>  _
		Public Property StatusDate() As Date
			Get
				Return Me._StatusDate
			End Get
			Set
				If ((Me._StatusDate = value)  _
							= false) Then
					Me.OnStatusDateChanging(value)
					Me.SendPropertyChanging
					Me._StatusDate = value
					Me.SendPropertyChanged("StatusDate")
					Me.OnStatusDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstShipDate", DbType:="DateTime")>  _
		Public Property FirstShipDate() As System.Nullable(Of Date)
			Get
				Return Me._FirstShipDate
			End Get
			Set
				If (Me._FirstShipDate.Equals(value) = false) Then
					Me.OnFirstShipDateChanging(value)
					Me.SendPropertyChanging
					Me._FirstShipDate = value
					Me.SendPropertyChanged("FirstShipDate")
					Me.OnFirstShipDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastShipDate", DbType:="DateTime")>  _
		Public Property LastShipDate() As System.Nullable(Of Date)
			Get
				Return Me._LastShipDate
			End Get
			Set
				If (Me._LastShipDate.Equals(value) = false) Then
					Me.OnLastShipDateChanging(value)
					Me.SendPropertyChanging
					Me._LastShipDate = value
					Me.SendPropertyChanged("LastShipDate")
					Me.OnLastShipDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaidDate", DbType:="DateTime")>  _
		Public Property PaidDate() As System.Nullable(Of Date)
			Get
				Return Me._PaidDate
			End Get
			Set
				If (Me._PaidDate.Equals(value) = false) Then
					Me.OnPaidDateChanging(value)
					Me.SendPropertyChanging
					Me._PaidDate = value
					Me.SendPropertyChanged("PaidDate")
					Me.OnPaidDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VoidDate", DbType:="DateTime")>  _
		Public Property VoidDate() As System.Nullable(Of Date)
			Get
				Return Me._VoidDate
			End Get
			Set
				If (Me._VoidDate.Equals(value) = false) Then
					Me.OnVoidDateChanging(value)
					Me.SendPropertyChanging
					Me._VoidDate = value
					Me.SendPropertyChanged("VoidDate")
					Me.OnVoidDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_OrderItems", ThisKey:="OrderID", OtherKey:="OrderID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderMemo", Storage:="_OrderMemos", ThisKey:="OrderID", OtherKey:="OrderID")>  _
		Public Property OrderMemos() As EntitySet(Of OrderMemo)
			Get
				Return Me._OrderMemos
			End Get
			Set
				Me._OrderMemos.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Coupon_Order", Storage:="_Coupon", ThisKey:="CouponID", OtherKey:="CouponID", IsForeignKey:=true)>  _
		Public Property Coupon() As Coupon
			Get
				Return Me._Coupon.Entity
			End Get
			Set
				Dim previousValue As Coupon = Me._Coupon.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Coupon.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Coupon.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Coupon.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orders.Add(Me)
						Me._CouponID = value.CouponID
					Else
						Me._CouponID = CType(Nothing, Nullable(Of Integer))
					End If
					Me.SendPropertyChanged("Coupon")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_Order", Storage:="_Site", ThisKey:="SiteID", OtherKey:="SiteID", IsForeignKey:=true)>  _
		Public Property Site() As Site
			Get
				Return Me._Site.Entity
			End Get
			Set
				Dim previousValue As Site = Me._Site.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Site.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Site.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Site.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Orders.Add(Me)
						Me._SiteID = value.SiteID
					Else
						Me._SiteID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Site")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.[Order] = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.[Order] = Nothing
		End Sub
		
		Private Sub attach_OrderMemos(ByVal entity As OrderMemo)
			Me.SendPropertyChanging
			entity.[Order] = Me
		End Sub
		
		Private Sub detach_OrderMemos(ByVal entity As OrderMemo)
			Me.SendPropertyChanging
			entity.[Order] = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductOptions")>  _
	Partial Public Class ProductOption
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductOptionID As Integer
		
		Private _ProductID As Integer
		
		Private _OptionName As String
		
		Private _Required As Short
		
		Private _AllowSKU As Short
		
		Private _Active As Short
		
		Private _DisplayOrder As Integer
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _OrderItemOptions As EntitySet(Of OrderItemOption)
		
		Private _ProductOptionValues As EntitySet(Of ProductOptionValue)
		
		Private _Product As EntityRef(Of Product)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductOptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductOptionIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnOptionNameChanging(value As String)
    End Sub
    Partial Private Sub OnOptionNameChanged()
    End Sub
    Partial Private Sub OnRequiredChanging(value As Short)
    End Sub
    Partial Private Sub OnRequiredChanged()
    End Sub
    Partial Private Sub OnAllowSKUChanging(value As Short)
    End Sub
    Partial Private Sub OnAllowSKUChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDisplayOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisplayOrderChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItemOptions = New EntitySet(Of OrderItemOption)(AddressOf Me.attach_OrderItemOptions, AddressOf Me.detach_OrderItemOptions)
			Me._ProductOptionValues = New EntitySet(Of ProductOptionValue)(AddressOf Me.attach_ProductOptionValues, AddressOf Me.detach_ProductOptionValues)
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductOptionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ProductOptionID() As Integer
			Get
				Return Me._ProductOptionID
			End Get
			Set
				If ((Me._ProductOptionID = value)  _
							= false) Then
					Me.OnProductOptionIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductOptionID = value
					Me.SendPropertyChanged("ProductOptionID")
					Me.OnProductOptionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptionName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property OptionName() As String
			Get
				Return Me._OptionName
			End Get
			Set
				If (String.Equals(Me._OptionName, value) = false) Then
					Me.OnOptionNameChanging(value)
					Me.SendPropertyChanging
					Me._OptionName = value
					Me.SendPropertyChanged("OptionName")
					Me.OnOptionNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Required", DbType:="SmallInt NOT NULL")>  _
		Public Property Required() As Short
			Get
				Return Me._Required
			End Get
			Set
				If ((Me._Required = value)  _
							= false) Then
					Me.OnRequiredChanging(value)
					Me.SendPropertyChanging
					Me._Required = value
					Me.SendPropertyChanged("Required")
					Me.OnRequiredChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowSKU", DbType:="SmallInt NOT NULL")>  _
		Public Property AllowSKU() As Short
			Get
				Return Me._AllowSKU
			End Get
			Set
				If ((Me._AllowSKU = value)  _
							= false) Then
					Me.OnAllowSKUChanging(value)
					Me.SendPropertyChanging
					Me._AllowSKU = value
					Me.SendPropertyChanged("AllowSKU")
					Me.OnAllowSKUChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="SmallInt NOT NULL")>  _
		Public Property Active() As Short
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
		Public Property DisplayOrder() As Integer
			Get
				Return Me._DisplayOrder
			End Get
			Set
				If ((Me._DisplayOrder = value)  _
							= false) Then
					Me.OnDisplayOrderChanging(value)
					Me.SendPropertyChanging
					Me._DisplayOrder = value
					Me.SendPropertyChanged("DisplayOrder")
					Me.OnDisplayOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOption_OrderItemOption", Storage:="_OrderItemOptions", ThisKey:="ProductOptionID", OtherKey:="ProductOptionID")>  _
		Public Property OrderItemOptions() As EntitySet(Of OrderItemOption)
			Get
				Return Me._OrderItemOptions
			End Get
			Set
				Me._OrderItemOptions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOption_ProductOptionValue", Storage:="_ProductOptionValues", ThisKey:="ProductOptionID", OtherKey:="ProductOptionID")>  _
		Public Property ProductOptionValues() As EntitySet(Of ProductOptionValue)
			Get
				Return Me._ProductOptionValues
			End Get
			Set
				Me._ProductOptionValues.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductOption", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.ProductOptions.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductOptions.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.ProductOption = Me
		End Sub
		
		Private Sub detach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.ProductOption = Nothing
		End Sub
		
		Private Sub attach_ProductOptionValues(ByVal entity As ProductOptionValue)
			Me.SendPropertyChanging
			entity.ProductOption = Me
		End Sub
		
		Private Sub detach_ProductOptionValues(ByVal entity As ProductOptionValue)
			Me.SendPropertyChanging
			entity.ProductOption = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductOptionValues")>  _
	Partial Public Class ProductOptionValue
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductOptionValueID As Integer
		
		Private _ProductOptionID As Integer
		
		Private _ValueName As String
		
		Private _SKU As String
		
		Private _PriceDifference As Decimal
		
		Private _WeightDifference As Decimal
		
		Private _Active As Short
		
		Private _DisplayOrder As Integer
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _OrderItemOptions As EntitySet(Of OrderItemOption)
		
		Private _ProductOption As EntityRef(Of ProductOption)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductOptionValueIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductOptionValueIDChanged()
    End Sub
    Partial Private Sub OnProductOptionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductOptionIDChanged()
    End Sub
    Partial Private Sub OnValueNameChanging(value As String)
    End Sub
    Partial Private Sub OnValueNameChanged()
    End Sub
    Partial Private Sub OnSKUChanging(value As String)
    End Sub
    Partial Private Sub OnSKUChanged()
    End Sub
    Partial Private Sub OnPriceDifferenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceDifferenceChanged()
    End Sub
    Partial Private Sub OnWeightDifferenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightDifferenceChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDisplayOrderChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisplayOrderChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItemOptions = New EntitySet(Of OrderItemOption)(AddressOf Me.attach_OrderItemOptions, AddressOf Me.detach_OrderItemOptions)
			Me._ProductOption = CType(Nothing, EntityRef(Of ProductOption))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductOptionValueID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ProductOptionValueID() As Integer
			Get
				Return Me._ProductOptionValueID
			End Get
			Set
				If ((Me._ProductOptionValueID = value)  _
							= false) Then
					Me.OnProductOptionValueIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductOptionValueID = value
					Me.SendPropertyChanged("ProductOptionValueID")
					Me.OnProductOptionValueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductOptionID", DbType:="Int NOT NULL")>  _
		Public Property ProductOptionID() As Integer
			Get
				Return Me._ProductOptionID
			End Get
			Set
				If ((Me._ProductOptionID = value)  _
							= false) Then
					If Me._ProductOption.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductOptionIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductOptionID = value
					Me.SendPropertyChanged("ProductOptionID")
					Me.OnProductOptionIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValueName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ValueName() As String
			Get
				Return Me._ValueName
			End Get
			Set
				If (String.Equals(Me._ValueName, value) = false) Then
					Me.OnValueNameChanging(value)
					Me.SendPropertyChanging
					Me._ValueName = value
					Me.SendPropertyChanged("ValueName")
					Me.OnValueNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SKU", DbType:="VarChar(50)")>  _
		Public Property SKU() As String
			Get
				Return Me._SKU
			End Get
			Set
				If (String.Equals(Me._SKU, value) = false) Then
					Me.OnSKUChanging(value)
					Me.SendPropertyChanging
					Me._SKU = value
					Me.SendPropertyChanged("SKU")
					Me.OnSKUChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceDifference", DbType:="Money NOT NULL")>  _
		Public Property PriceDifference() As Decimal
			Get
				Return Me._PriceDifference
			End Get
			Set
				If ((Me._PriceDifference = value)  _
							= false) Then
					Me.OnPriceDifferenceChanging(value)
					Me.SendPropertyChanging
					Me._PriceDifference = value
					Me.SendPropertyChanged("PriceDifference")
					Me.OnPriceDifferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightDifference", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property WeightDifference() As Decimal
			Get
				Return Me._WeightDifference
			End Get
			Set
				If ((Me._WeightDifference = value)  _
							= false) Then
					Me.OnWeightDifferenceChanging(value)
					Me.SendPropertyChanging
					Me._WeightDifference = value
					Me.SendPropertyChanged("WeightDifference")
					Me.OnWeightDifferenceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="SmallInt NOT NULL")>  _
		Public Property Active() As Short
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
		Public Property DisplayOrder() As Integer
			Get
				Return Me._DisplayOrder
			End Get
			Set
				If ((Me._DisplayOrder = value)  _
							= false) Then
					Me.OnDisplayOrderChanging(value)
					Me.SendPropertyChanging
					Me._DisplayOrder = value
					Me.SendPropertyChanged("DisplayOrder")
					Me.OnDisplayOrderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOptionValue_OrderItemOption", Storage:="_OrderItemOptions", ThisKey:="ProductOptionValueID", OtherKey:="ProductOptionValueID")>  _
		Public Property OrderItemOptions() As EntitySet(Of OrderItemOption)
			Get
				Return Me._OrderItemOptions
			End Get
			Set
				Me._OrderItemOptions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductOption_ProductOptionValue", Storage:="_ProductOption", ThisKey:="ProductOptionID", OtherKey:="ProductOptionID", IsForeignKey:=true)>  _
		Public Property ProductOption() As ProductOption
			Get
				Return Me._ProductOption.Entity
			End Get
			Set
				Dim previousValue As ProductOption = Me._ProductOption.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ProductOption.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ProductOption.Entity = Nothing
						previousValue.ProductOptionValues.Remove(Me)
					End If
					Me._ProductOption.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.ProductOptionValues.Add(Me)
						Me._ProductOptionID = value.ProductOptionID
					Else
						Me._ProductOptionID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("ProductOption")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.ProductOptionValue = Me
		End Sub
		
		Private Sub detach_OrderItemOptions(ByVal entity As OrderItemOption)
			Me.SendPropertyChanging
			entity.ProductOptionValue = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductPriceRanges")>  _
	Partial Public Class ProductPriceRange
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductPriceRangeID As Integer
		
		Private _ProductID As Integer
		
		Private _LowerLimit As System.Nullable(Of Integer)
		
		Private _Limit As Integer
		
		Private _Price As Decimal
		
		Private _Active As Integer
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductPriceRangeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductPriceRangeIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnLowerLimitChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLowerLimitChanged()
    End Sub
    Partial Private Sub OnLimitChanging(value As Integer)
    End Sub
    Partial Private Sub OnLimitChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductPriceRangeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ProductPriceRangeID() As Integer
			Get
				Return Me._ProductPriceRangeID
			End Get
			Set
				If ((Me._ProductPriceRangeID = value)  _
							= false) Then
					Me.OnProductPriceRangeIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductPriceRangeID = value
					Me.SendPropertyChanged("ProductPriceRangeID")
					Me.OnProductPriceRangeIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LowerLimit", DbType:="Int")>  _
		Public Property LowerLimit() As System.Nullable(Of Integer)
			Get
				Return Me._LowerLimit
			End Get
			Set
				If (Me._LowerLimit.Equals(value) = false) Then
					Me.OnLowerLimitChanging(value)
					Me.SendPropertyChanging
					Me._LowerLimit = value
					Me.SendPropertyChanged("LowerLimit")
					Me.OnLowerLimitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Limit", DbType:="Int NOT NULL")>  _
		Public Property Limit() As Integer
			Get
				Return Me._Limit
			End Get
			Set
				If ((Me._Limit = value)  _
							= false) Then
					Me.OnLimitChanging(value)
					Me.SendPropertyChanging
					Me._Limit = value
					Me.SendPropertyChanged("Limit")
					Me.OnLimitChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money NOT NULL")>  _
		Public Property Price() As Decimal
			Get
				Return Me._Price
			End Get
			Set
				If ((Me._Price = value)  _
							= false) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Int NOT NULL")>  _
		Public Property Active() As Integer
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")>  _
	Partial Public Class Product
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ProductID As Integer
		
		Private _CategoryID As Integer
		
		Private _ProductCode As String
		
		Private _ProductName As String
		
		Private _Description As String
		
		Private _Keywords As String
		
		Private _ImagePath1 As String
		
		Private _ImagePath2 As String
		
		Private _ImagePath3 As String
		
		Private _ImagePath4 As String
		
		Private _ImagePath5 As String
		
		Private _ImagePath6 As String
		
		Private _ImagePath7 As String
		
		Private _ImagePath8 As String
		
		Private _ImagePath9 As String
		
		Private _ImagePath10 As String
		
		Private _Cost As Decimal
		
		Private _RetailPrice As Decimal
		
		Private _OriginalPrice As Decimal
		
		Private _Weight As Decimal
		
		Private _Inventory As System.Nullable(Of Integer)
		
		Private _ShowNew As Short
		
		Private _ShowReducedPrice As Short
		
		Private _AllowBackorder As Short
		
		Private _Active As Short
		
		Private _System As Short
		
		Private _Status As String
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Length As String
		
		Private _Ring As String
		
		Private _AmountPerBox As System.Nullable(Of Integer)
		
		Private _Wrapper As String
		
		Private _OldCategoryID As System.Nullable(Of Integer)
		
		Private _ShowFeatured As System.Nullable(Of Short)
		
		Private _ShowHomePage As System.Nullable(Of Short)
		
		Private _FeaturedTitle As String
		
		Private _FeaturedSubTitle As String
		
		Private _FeaturedBullet1 As String
		
		Private _FeaturedBullet2 As String
		
		Private _FeaturedBullet3 As String
		
		Private _OrderItems As EntitySet(Of OrderItem)
		
		Private _ProductOptions As EntitySet(Of ProductOption)
		
		Private _SiteProducts As EntitySet(Of SiteProduct)
		
		Private _Category As EntityRef(Of Category)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnProductCodeChanging(value As String)
    End Sub
    Partial Private Sub OnProductCodeChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnImagePath1Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath1Changed()
    End Sub
    Partial Private Sub OnImagePath2Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath2Changed()
    End Sub
    Partial Private Sub OnImagePath3Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath3Changed()
    End Sub
    Partial Private Sub OnImagePath4Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath4Changed()
    End Sub
    Partial Private Sub OnImagePath5Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath5Changed()
    End Sub
    Partial Private Sub OnImagePath6Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath6Changed()
    End Sub
    Partial Private Sub OnImagePath7Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath7Changed()
    End Sub
    Partial Private Sub OnImagePath8Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath8Changed()
    End Sub
    Partial Private Sub OnImagePath9Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath9Changed()
    End Sub
    Partial Private Sub OnImagePath10Changing(value As String)
    End Sub
    Partial Private Sub OnImagePath10Changed()
    End Sub
    Partial Private Sub OnCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnRetailPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnRetailPriceChanged()
    End Sub
    Partial Private Sub OnOriginalPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnOriginalPriceChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnInventoryChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInventoryChanged()
    End Sub
    Partial Private Sub OnShowNewChanging(value As Short)
    End Sub
    Partial Private Sub OnShowNewChanged()
    End Sub
    Partial Private Sub OnShowReducedPriceChanging(value As Short)
    End Sub
    Partial Private Sub OnShowReducedPriceChanged()
    End Sub
    Partial Private Sub OnAllowBackorderChanging(value As Short)
    End Sub
    Partial Private Sub OnAllowBackorderChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnSystemChanging(value As Short)
    End Sub
    Partial Private Sub OnSystemChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub OnLengthChanging(value As String)
    End Sub
    Partial Private Sub OnLengthChanged()
    End Sub
    Partial Private Sub OnRingChanging(value As String)
    End Sub
    Partial Private Sub OnRingChanged()
    End Sub
    Partial Private Sub OnAmountPerBoxChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAmountPerBoxChanged()
    End Sub
    Partial Private Sub OnWrapperChanging(value As String)
    End Sub
    Partial Private Sub OnWrapperChanged()
    End Sub
    Partial Private Sub OnOldCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOldCategoryIDChanged()
    End Sub
    Partial Private Sub OnShowFeaturedChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnShowFeaturedChanged()
    End Sub
    Partial Private Sub OnShowHomePageChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnShowHomePageChanged()
    End Sub
    Partial Private Sub OnFeaturedTitleChanging(value As String)
    End Sub
    Partial Private Sub OnFeaturedTitleChanged()
    End Sub
    Partial Private Sub OnFeaturedSubTitleChanging(value As String)
    End Sub
    Partial Private Sub OnFeaturedSubTitleChanged()
    End Sub
    Partial Private Sub OnFeaturedBullet1Changing(value As String)
    End Sub
    Partial Private Sub OnFeaturedBullet1Changed()
    End Sub
    Partial Private Sub OnFeaturedBullet2Changing(value As String)
    End Sub
    Partial Private Sub OnFeaturedBullet2Changed()
    End Sub
    Partial Private Sub OnFeaturedBullet3Changing(value As String)
    End Sub
    Partial Private Sub OnFeaturedBullet3Changed()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
			Me._ProductOptions = New EntitySet(Of ProductOption)(AddressOf Me.attach_ProductOptions, AddressOf Me.detach_ProductOptions)
			Me._SiteProducts = New EntitySet(Of SiteProduct)(AddressOf Me.attach_SiteProducts, AddressOf Me.detach_SiteProducts)
			Me._Category = CType(Nothing, EntityRef(Of Category))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")>  _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set
				If ((Me._CategoryID = value)  _
							= false) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCode", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property ProductCode() As String
			Get
				Return Me._ProductCode
			End Get
			Set
				If (String.Equals(Me._ProductCode, value) = false) Then
					Me.OnProductCodeChanging(value)
					Me.SendPropertyChanging
					Me._ProductCode = value
					Me.SendPropertyChanged("ProductCode")
					Me.OnProductCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set
				If (String.Equals(Me._ProductName, value) = false) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(6000)")>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="VarChar(200)")>  _
		Public Property Keywords() As String
			Get
				Return Me._Keywords
			End Get
			Set
				If (String.Equals(Me._Keywords, value) = false) Then
					Me.OnKeywordsChanging(value)
					Me.SendPropertyChanging
					Me._Keywords = value
					Me.SendPropertyChanged("Keywords")
					Me.OnKeywordsChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath1", DbType:="VarChar(200)")>  _
		Public Property ImagePath1() As String
			Get
				Return Me._ImagePath1
			End Get
			Set
				If (String.Equals(Me._ImagePath1, value) = false) Then
					Me.OnImagePath1Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath1 = value
					Me.SendPropertyChanged("ImagePath1")
					Me.OnImagePath1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath2", DbType:="VarChar(200)")>  _
		Public Property ImagePath2() As String
			Get
				Return Me._ImagePath2
			End Get
			Set
				If (String.Equals(Me._ImagePath2, value) = false) Then
					Me.OnImagePath2Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath2 = value
					Me.SendPropertyChanged("ImagePath2")
					Me.OnImagePath2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath3", DbType:="VarChar(200)")>  _
		Public Property ImagePath3() As String
			Get
				Return Me._ImagePath3
			End Get
			Set
				If (String.Equals(Me._ImagePath3, value) = false) Then
					Me.OnImagePath3Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath3 = value
					Me.SendPropertyChanged("ImagePath3")
					Me.OnImagePath3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath4", DbType:="VarChar(200)")>  _
		Public Property ImagePath4() As String
			Get
				Return Me._ImagePath4
			End Get
			Set
				If (String.Equals(Me._ImagePath4, value) = false) Then
					Me.OnImagePath4Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath4 = value
					Me.SendPropertyChanged("ImagePath4")
					Me.OnImagePath4Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath5", DbType:="VarChar(200)")>  _
		Public Property ImagePath5() As String
			Get
				Return Me._ImagePath5
			End Get
			Set
				If (String.Equals(Me._ImagePath5, value) = false) Then
					Me.OnImagePath5Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath5 = value
					Me.SendPropertyChanged("ImagePath5")
					Me.OnImagePath5Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath6", DbType:="VarChar(200)")>  _
		Public Property ImagePath6() As String
			Get
				Return Me._ImagePath6
			End Get
			Set
				If (String.Equals(Me._ImagePath6, value) = false) Then
					Me.OnImagePath6Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath6 = value
					Me.SendPropertyChanged("ImagePath6")
					Me.OnImagePath6Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath7", DbType:="VarChar(200)")>  _
		Public Property ImagePath7() As String
			Get
				Return Me._ImagePath7
			End Get
			Set
				If (String.Equals(Me._ImagePath7, value) = false) Then
					Me.OnImagePath7Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath7 = value
					Me.SendPropertyChanged("ImagePath7")
					Me.OnImagePath7Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath8", DbType:="VarChar(200)")>  _
		Public Property ImagePath8() As String
			Get
				Return Me._ImagePath8
			End Get
			Set
				If (String.Equals(Me._ImagePath8, value) = false) Then
					Me.OnImagePath8Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath8 = value
					Me.SendPropertyChanged("ImagePath8")
					Me.OnImagePath8Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath9", DbType:="VarChar(200)")>  _
		Public Property ImagePath9() As String
			Get
				Return Me._ImagePath9
			End Get
			Set
				If (String.Equals(Me._ImagePath9, value) = false) Then
					Me.OnImagePath9Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath9 = value
					Me.SendPropertyChanged("ImagePath9")
					Me.OnImagePath9Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagePath10", DbType:="VarChar(200)")>  _
		Public Property ImagePath10() As String
			Get
				Return Me._ImagePath10
			End Get
			Set
				If (String.Equals(Me._ImagePath10, value) = false) Then
					Me.OnImagePath10Changing(value)
					Me.SendPropertyChanging
					Me._ImagePath10 = value
					Me.SendPropertyChanged("ImagePath10")
					Me.OnImagePath10Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="Money NOT NULL")>  _
		Public Property Cost() As Decimal
			Get
				Return Me._Cost
			End Get
			Set
				If ((Me._Cost = value)  _
							= false) Then
					Me.OnCostChanging(value)
					Me.SendPropertyChanging
					Me._Cost = value
					Me.SendPropertyChanged("Cost")
					Me.OnCostChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetailPrice", DbType:="Money NOT NULL")>  _
		Public Property RetailPrice() As Decimal
			Get
				Return Me._RetailPrice
			End Get
			Set
				If ((Me._RetailPrice = value)  _
							= false) Then
					Me.OnRetailPriceChanging(value)
					Me.SendPropertyChanging
					Me._RetailPrice = value
					Me.SendPropertyChanged("RetailPrice")
					Me.OnRetailPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginalPrice", DbType:="Money NOT NULL")>  _
		Public Property OriginalPrice() As Decimal
			Get
				Return Me._OriginalPrice
			End Get
			Set
				If ((Me._OriginalPrice = value)  _
							= false) Then
					Me.OnOriginalPriceChanging(value)
					Me.SendPropertyChanging
					Me._OriginalPrice = value
					Me.SendPropertyChanged("OriginalPrice")
					Me.OnOriginalPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(18,4) NOT NULL")>  _
		Public Property Weight() As Decimal
			Get
				Return Me._Weight
			End Get
			Set
				If ((Me._Weight = value)  _
							= false) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inventory", DbType:="Int")>  _
		Public Property Inventory() As System.Nullable(Of Integer)
			Get
				Return Me._Inventory
			End Get
			Set
				If (Me._Inventory.Equals(value) = false) Then
					Me.OnInventoryChanging(value)
					Me.SendPropertyChanging
					Me._Inventory = value
					Me.SendPropertyChanged("Inventory")
					Me.OnInventoryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowNew", DbType:="SmallInt NOT NULL")>  _
		Public Property ShowNew() As Short
			Get
				Return Me._ShowNew
			End Get
			Set
				If ((Me._ShowNew = value)  _
							= false) Then
					Me.OnShowNewChanging(value)
					Me.SendPropertyChanging
					Me._ShowNew = value
					Me.SendPropertyChanged("ShowNew")
					Me.OnShowNewChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowReducedPrice", DbType:="SmallInt NOT NULL")>  _
		Public Property ShowReducedPrice() As Short
			Get
				Return Me._ShowReducedPrice
			End Get
			Set
				If ((Me._ShowReducedPrice = value)  _
							= false) Then
					Me.OnShowReducedPriceChanging(value)
					Me.SendPropertyChanging
					Me._ShowReducedPrice = value
					Me.SendPropertyChanged("ShowReducedPrice")
					Me.OnShowReducedPriceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowBackorder", DbType:="SmallInt NOT NULL")>  _
		Public Property AllowBackorder() As Short
			Get
				Return Me._AllowBackorder
			End Get
			Set
				If ((Me._AllowBackorder = value)  _
							= false) Then
					Me.OnAllowBackorderChanging(value)
					Me.SendPropertyChanging
					Me._AllowBackorder = value
					Me.SendPropertyChanged("AllowBackorder")
					Me.OnAllowBackorderChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="SmallInt NOT NULL")>  _
		Public Property Active() As Short
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_System", DbType:="SmallInt NOT NULL")>  _
		Public Property System() As Short
			Get
				Return Me._System
			End Get
			Set
				If ((Me._System = value)  _
							= false) Then
					Me.OnSystemChanging(value)
					Me.SendPropertyChanging
					Me._System = value
					Me.SendPropertyChanged("System")
					Me.OnSystemChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Length", DbType:="VarChar(50)")>  _
		Public Property Length() As String
			Get
				Return Me._Length
			End Get
			Set
				If (String.Equals(Me._Length, value) = false) Then
					Me.OnLengthChanging(value)
					Me.SendPropertyChanging
					Me._Length = value
					Me.SendPropertyChanged("Length")
					Me.OnLengthChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ring", DbType:="VarChar(50)")>  _
		Public Property Ring() As String
			Get
				Return Me._Ring
			End Get
			Set
				If (String.Equals(Me._Ring, value) = false) Then
					Me.OnRingChanging(value)
					Me.SendPropertyChanging
					Me._Ring = value
					Me.SendPropertyChanged("Ring")
					Me.OnRingChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountPerBox", DbType:="Int")>  _
		Public Property AmountPerBox() As System.Nullable(Of Integer)
			Get
				Return Me._AmountPerBox
			End Get
			Set
				If (Me._AmountPerBox.Equals(value) = false) Then
					Me.OnAmountPerBoxChanging(value)
					Me.SendPropertyChanging
					Me._AmountPerBox = value
					Me.SendPropertyChanged("AmountPerBox")
					Me.OnAmountPerBoxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wrapper", DbType:="VarChar(50)")>  _
		Public Property Wrapper() As String
			Get
				Return Me._Wrapper
			End Get
			Set
				If (String.Equals(Me._Wrapper, value) = false) Then
					Me.OnWrapperChanging(value)
					Me.SendPropertyChanging
					Me._Wrapper = value
					Me.SendPropertyChanged("Wrapper")
					Me.OnWrapperChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OldCategoryID", DbType:="Int")>  _
		Public Property OldCategoryID() As System.Nullable(Of Integer)
			Get
				Return Me._OldCategoryID
			End Get
			Set
				If (Me._OldCategoryID.Equals(value) = false) Then
					Me.OnOldCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._OldCategoryID = value
					Me.SendPropertyChanged("OldCategoryID")
					Me.OnOldCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowFeatured", DbType:="SmallInt")>  _
		Public Property ShowFeatured() As System.Nullable(Of Short)
			Get
				Return Me._ShowFeatured
			End Get
			Set
				If (Me._ShowFeatured.Equals(value) = false) Then
					Me.OnShowFeaturedChanging(value)
					Me.SendPropertyChanging
					Me._ShowFeatured = value
					Me.SendPropertyChanged("ShowFeatured")
					Me.OnShowFeaturedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowHomePage", DbType:="SmallInt")>  _
		Public Property ShowHomePage() As System.Nullable(Of Short)
			Get
				Return Me._ShowHomePage
			End Get
			Set
				If (Me._ShowHomePage.Equals(value) = false) Then
					Me.OnShowHomePageChanging(value)
					Me.SendPropertyChanging
					Me._ShowHomePage = value
					Me.SendPropertyChanged("ShowHomePage")
					Me.OnShowHomePageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeaturedTitle", DbType:="VarChar(255)")>  _
		Public Property FeaturedTitle() As String
			Get
				Return Me._FeaturedTitle
			End Get
			Set
				If (String.Equals(Me._FeaturedTitle, value) = false) Then
					Me.OnFeaturedTitleChanging(value)
					Me.SendPropertyChanging
					Me._FeaturedTitle = value
					Me.SendPropertyChanged("FeaturedTitle")
					Me.OnFeaturedTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeaturedSubTitle", DbType:="VarChar(255)")>  _
		Public Property FeaturedSubTitle() As String
			Get
				Return Me._FeaturedSubTitle
			End Get
			Set
				If (String.Equals(Me._FeaturedSubTitle, value) = false) Then
					Me.OnFeaturedSubTitleChanging(value)
					Me.SendPropertyChanging
					Me._FeaturedSubTitle = value
					Me.SendPropertyChanged("FeaturedSubTitle")
					Me.OnFeaturedSubTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeaturedBullet1", DbType:="VarChar(255)")>  _
		Public Property FeaturedBullet1() As String
			Get
				Return Me._FeaturedBullet1
			End Get
			Set
				If (String.Equals(Me._FeaturedBullet1, value) = false) Then
					Me.OnFeaturedBullet1Changing(value)
					Me.SendPropertyChanging
					Me._FeaturedBullet1 = value
					Me.SendPropertyChanged("FeaturedBullet1")
					Me.OnFeaturedBullet1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeaturedBullet2", DbType:="VarChar(255)")>  _
		Public Property FeaturedBullet2() As String
			Get
				Return Me._FeaturedBullet2
			End Get
			Set
				If (String.Equals(Me._FeaturedBullet2, value) = false) Then
					Me.OnFeaturedBullet2Changing(value)
					Me.SendPropertyChanging
					Me._FeaturedBullet2 = value
					Me.SendPropertyChanged("FeaturedBullet2")
					Me.OnFeaturedBullet2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeaturedBullet3", DbType:="VarChar(255)")>  _
		Public Property FeaturedBullet3() As String
			Get
				Return Me._FeaturedBullet3
			End Get
			Set
				If (String.Equals(Me._FeaturedBullet3, value) = false) Then
					Me.OnFeaturedBullet3Changing(value)
					Me.SendPropertyChanging
					Me._FeaturedBullet3 = value
					Me.SendPropertyChanged("FeaturedBullet3")
					Me.OnFeaturedBullet3Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_OrderItem", Storage:="_OrderItems", ThisKey:="ProductID", OtherKey:="ProductID")>  _
		Public Property OrderItems() As EntitySet(Of OrderItem)
			Get
				Return Me._OrderItems
			End Get
			Set
				Me._OrderItems.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductOption", Storage:="_ProductOptions", ThisKey:="ProductID", OtherKey:="ProductID")>  _
		Public Property ProductOptions() As EntitySet(Of ProductOption)
			Get
				Return Me._ProductOptions
			End Get
			Set
				Me._ProductOptions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_SiteProduct", Storage:="_SiteProducts", ThisKey:="ProductID", OtherKey:="ProductID")>  _
		Public Property SiteProducts() As EntitySet(Of SiteProduct)
			Get
				Return Me._SiteProducts
			End Get
			Set
				Me._SiteProducts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=true)>  _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set
				Dim previousValue As Category = Me._Category.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Category.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Category.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Products.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_OrderItems(ByVal entity As OrderItem)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_ProductOptions(ByVal entity As ProductOption)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_ProductOptions(ByVal entity As ProductOption)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
		
		Private Sub attach_SiteProducts(ByVal entity As SiteProduct)
			Me.SendPropertyChanging
			entity.Product = Me
		End Sub
		
		Private Sub detach_SiteProducts(ByVal entity As SiteProduct)
			Me.SendPropertyChanging
			entity.Product = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Settings")>  _
	Partial Public Class Setting
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SettingID As Integer
		
		Private _SettingType As String
		
		Private _SettingValue As String
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSettingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSettingIDChanged()
    End Sub
    Partial Private Sub OnSettingTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSettingTypeChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property SettingID() As Integer
			Get
				Return Me._SettingID
			End Get
			Set
				If ((Me._SettingID = value)  _
							= false) Then
					Me.OnSettingIDChanging(value)
					Me.SendPropertyChanging
					Me._SettingID = value
					Me.SendPropertyChanged("SettingID")
					Me.OnSettingIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property SettingType() As String
			Get
				Return Me._SettingType
			End Get
			Set
				If (String.Equals(Me._SettingType, value) = false) Then
					Me.OnSettingTypeChanging(value)
					Me.SendPropertyChanging
					Me._SettingType = value
					Me.SendPropertyChanged("SettingType")
					Me.OnSettingTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="VarChar(500)")>  _
		Public Property SettingValue() As String
			Get
				Return Me._SettingValue
			End Get
			Set
				If (String.Equals(Me._SettingValue, value) = false) Then
					Me.OnSettingValueChanging(value)
					Me.SendPropertyChanging
					Me._SettingValue = value
					Me.SendPropertyChanged("SettingValue")
					Me.OnSettingValueChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteCategories")>  _
	Partial Public Class SiteCategory
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SiteCategoryID As Integer
		
		Private _SiteID As Integer
		
		Private _CategoryID As Integer
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Category As EntityRef(Of Category)
		
		Private _Site As EntityRef(Of Site)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteCategoryIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Category = CType(Nothing, EntityRef(Of Category))
			Me._Site = CType(Nothing, EntityRef(Of Site))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property SiteCategoryID() As Integer
			Get
				Return Me._SiteCategoryID
			End Get
			Set
				If ((Me._SiteCategoryID = value)  _
							= false) Then
					Me.OnSiteCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteCategoryID = value
					Me.SendPropertyChanged("SiteCategoryID")
					Me.OnSiteCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int NOT NULL")>  _
		Public Property SiteID() As Integer
			Get
				Return Me._SiteID
			End Get
			Set
				If ((Me._SiteID = value)  _
							= false) Then
					If Me._Site.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSiteIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteID = value
					Me.SendPropertyChanged("SiteID")
					Me.OnSiteIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")>  _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set
				If ((Me._CategoryID = value)  _
							= false) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_SiteCategory", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=true)>  _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set
				Dim previousValue As Category = Me._Category.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Category.Entity = Nothing
						previousValue.SiteCategories.Remove(Me)
					End If
					Me._Category.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SiteCategories.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteCategory", Storage:="_Site", ThisKey:="SiteID", OtherKey:="SiteID", IsForeignKey:=true)>  _
		Public Property Site() As Site
			Get
				Return Me._Site.Entity
			End Get
			Set
				Dim previousValue As Site = Me._Site.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Site.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Site.Entity = Nothing
						previousValue.SiteCategories.Remove(Me)
					End If
					Me._Site.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SiteCategories.Add(Me)
						Me._SiteID = value.SiteID
					Else
						Me._SiteID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Site")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteProducts")>  _
	Partial Public Class SiteProduct
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SiteProductID As Integer
		
		Private _SiteID As Integer
		
		Private _ProductID As Integer
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Product As EntityRef(Of Product)
		
		Private _Site As EntityRef(Of Site)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteProductIDChanged()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Product = CType(Nothing, EntityRef(Of Product))
			Me._Site = CType(Nothing, EntityRef(Of Site))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property SiteProductID() As Integer
			Get
				Return Me._SiteProductID
			End Get
			Set
				If ((Me._SiteProductID = value)  _
							= false) Then
					Me.OnSiteProductIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteProductID = value
					Me.SendPropertyChanged("SiteProductID")
					Me.OnSiteProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", DbType:="Int NOT NULL")>  _
		Public Property SiteID() As Integer
			Get
				Return Me._SiteID
			End Get
			Set
				If ((Me._SiteID = value)  _
							= false) Then
					If Me._Site.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSiteIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteID = value
					Me.SendPropertyChanged("SiteID")
					Me.OnSiteIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set
				If ((Me._ProductID = value)  _
							= false) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_SiteProduct", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=true)>  _
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set
				Dim previousValue As Product = Me._Product.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Product.Entity = Nothing
						previousValue.SiteProducts.Remove(Me)
					End If
					Me._Product.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SiteProducts.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteProduct", Storage:="_Site", ThisKey:="SiteID", OtherKey:="SiteID", IsForeignKey:=true)>  _
		Public Property Site() As Site
			Get
				Return Me._Site.Entity
			End Get
			Set
				Dim previousValue As Site = Me._Site.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Site.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Site.Entity = Nothing
						previousValue.SiteProducts.Remove(Me)
					End If
					Me._Site.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.SiteProducts.Add(Me)
						Me._SiteID = value.SiteID
					Else
						Me._SiteID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Site")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sites")>  _
	Partial Public Class Site
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _SiteID As Integer
		
		Private _SiteCode As String
		
		Private _SiteName As String
		
		Private _SiteURL As String
		
		Private _Active As Short
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _Orders As EntitySet(Of [Order])
		
		Private _SiteCategories As EntitySet(Of SiteCategory)
		
		Private _SiteProducts As EntitySet(Of SiteProduct)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteIDChanged()
    End Sub
    Partial Private Sub OnSiteCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSiteCodeChanged()
    End Sub
    Partial Private Sub OnSiteNameChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNameChanged()
    End Sub
    Partial Private Sub OnSiteURLChanging(value As String)
    End Sub
    Partial Private Sub OnSiteURLChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Short)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
			Me._SiteCategories = New EntitySet(Of SiteCategory)(AddressOf Me.attach_SiteCategories, AddressOf Me.detach_SiteCategories)
			Me._SiteProducts = New EntitySet(Of SiteProduct)(AddressOf Me.attach_SiteProducts, AddressOf Me.detach_SiteProducts)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property SiteID() As Integer
			Get
				Return Me._SiteID
			End Get
			Set
				If ((Me._SiteID = value)  _
							= false) Then
					Me.OnSiteIDChanging(value)
					Me.SendPropertyChanging
					Me._SiteID = value
					Me.SendPropertyChanged("SiteID")
					Me.OnSiteIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteCode", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
		Public Property SiteCode() As String
			Get
				Return Me._SiteCode
			End Get
			Set
				If (String.Equals(Me._SiteCode, value) = false) Then
					Me.OnSiteCodeChanging(value)
					Me.SendPropertyChanging
					Me._SiteCode = value
					Me.SendPropertyChanged("SiteCode")
					Me.OnSiteCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property SiteName() As String
			Get
				Return Me._SiteName
			End Get
			Set
				If (String.Equals(Me._SiteName, value) = false) Then
					Me.OnSiteNameChanging(value)
					Me.SendPropertyChanging
					Me._SiteName = value
					Me.SendPropertyChanged("SiteName")
					Me.OnSiteNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteURL", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
		Public Property SiteURL() As String
			Get
				Return Me._SiteURL
			End Get
			Set
				If (String.Equals(Me._SiteURL, value) = false) Then
					Me.OnSiteURLChanging(value)
					Me.SendPropertyChanging
					Me._SiteURL = value
					Me.SendPropertyChanged("SiteURL")
					Me.OnSiteURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="SmallInt NOT NULL")>  _
		Public Property Active() As Short
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_Order", Storage:="_Orders", ThisKey:="SiteID", OtherKey:="SiteID")>  _
		Public Property Orders() As EntitySet(Of [Order])
			Get
				Return Me._Orders
			End Get
			Set
				Me._Orders.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteCategory", Storage:="_SiteCategories", ThisKey:="SiteID", OtherKey:="SiteID")>  _
		Public Property SiteCategories() As EntitySet(Of SiteCategory)
			Get
				Return Me._SiteCategories
			End Get
			Set
				Me._SiteCategories.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Site_SiteProduct", Storage:="_SiteProducts", ThisKey:="SiteID", OtherKey:="SiteID")>  _
		Public Property SiteProducts() As EntitySet(Of SiteProduct)
			Get
				Return Me._SiteProducts
			End Get
			Set
				Me._SiteProducts.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Site = Me
		End Sub
		
		Private Sub detach_Orders(ByVal entity As [Order])
			Me.SendPropertyChanging
			entity.Site = Nothing
		End Sub
		
		Private Sub attach_SiteCategories(ByVal entity As SiteCategory)
			Me.SendPropertyChanging
			entity.Site = Me
		End Sub
		
		Private Sub detach_SiteCategories(ByVal entity As SiteCategory)
			Me.SendPropertyChanging
			entity.Site = Nothing
		End Sub
		
		Private Sub attach_SiteProducts(ByVal entity As SiteProduct)
			Me.SendPropertyChanging
			entity.Site = Me
		End Sub
		
		Private Sub detach_SiteProducts(ByVal entity As SiteProduct)
			Me.SendPropertyChanging
			entity.Site = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.States")>  _
	Partial Public Class State
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _StateID As Integer
		
		Private _StateCode As String
		
		Private _StateName As String
		
		Private _SalesTax As System.Nullable(Of Decimal)
		
		Private _CreateDate As Date
		
		Private _ModifyDate As Date
		
		Private _StateIsTaxable As System.Nullable(Of Short)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStateIDChanged()
    End Sub
    Partial Private Sub OnStateCodeChanging(value As String)
    End Sub
    Partial Private Sub OnStateCodeChanged()
    End Sub
    Partial Private Sub OnStateNameChanging(value As String)
    End Sub
    Partial Private Sub OnStateNameChanged()
    End Sub
    Partial Private Sub OnSalesTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalesTaxChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnModifyDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifyDateChanged()
    End Sub
    Partial Private Sub OnStateIsTaxableChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStateIsTaxableChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property StateID() As Integer
			Get
				Return Me._StateID
			End Get
			Set
				If ((Me._StateID = value)  _
							= false) Then
					Me.OnStateIDChanging(value)
					Me.SendPropertyChanging
					Me._StateID = value
					Me.SendPropertyChanged("StateID")
					Me.OnStateIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCode", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
		Public Property StateCode() As String
			Get
				Return Me._StateCode
			End Get
			Set
				If (String.Equals(Me._StateCode, value) = false) Then
					Me.OnStateCodeChanging(value)
					Me.SendPropertyChanging
					Me._StateCode = value
					Me.SendPropertyChanged("StateCode")
					Me.OnStateCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property StateName() As String
			Get
				Return Me._StateName
			End Get
			Set
				If (String.Equals(Me._StateName, value) = false) Then
					Me.OnStateNameChanging(value)
					Me.SendPropertyChanging
					Me._StateName = value
					Me.SendPropertyChanged("StateName")
					Me.OnStateNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesTax", DbType:="Decimal(18,4)")>  _
		Public Property SalesTax() As System.Nullable(Of Decimal)
			Get
				Return Me._SalesTax
			End Get
			Set
				If (Me._SalesTax.Equals(value) = false) Then
					Me.OnSalesTaxChanging(value)
					Me.SendPropertyChanging
					Me._SalesTax = value
					Me.SendPropertyChanged("SalesTax")
					Me.OnSalesTaxChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
		Public Property CreateDate() As Date
			Get
				Return Me._CreateDate
			End Get
			Set
				If ((Me._CreateDate = value)  _
							= false) Then
					Me.OnCreateDateChanging(value)
					Me.SendPropertyChanging
					Me._CreateDate = value
					Me.SendPropertyChanged("CreateDate")
					Me.OnCreateDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifyDate", DbType:="DateTime NOT NULL")>  _
		Public Property ModifyDate() As Date
			Get
				Return Me._ModifyDate
			End Get
			Set
				If ((Me._ModifyDate = value)  _
							= false) Then
					Me.OnModifyDateChanging(value)
					Me.SendPropertyChanging
					Me._ModifyDate = value
					Me.SendPropertyChanged("ModifyDate")
					Me.OnModifyDateChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateIsTaxable", DbType:="SmallInt")>  _
		Public Property StateIsTaxable() As System.Nullable(Of Short)
			Get
				Return Me._StateIsTaxable
			End Get
			Set
				If (Me._StateIsTaxable.Equals(value) = false) Then
					Me.OnStateIsTaxableChanging(value)
					Me.SendPropertyChanging
					Me._StateIsTaxable = value
					Me.SendPropertyChanged("StateIsTaxable")
					Me.OnStateIsTaxableChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TaxRates")>  _
	Partial Public Class TaxRate
		
		Private _State As String
		
		Private _ZipCode As System.Nullable(Of Double)
		
		Private _TaxRegionName As String
		
		Private _TaxRegionCode As String
		
		Private _CombinedRate As System.Nullable(Of Double)
		
		Private _StateRate As System.Nullable(Of Double)
		
		Private _CountyRate As System.Nullable(Of Double)
		
		Private _CityRate As System.Nullable(Of Double)
		
		Private _SpecialRate As System.Nullable(Of Double)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(2)")>  _
		Public Property State() As String
			Get
				Return Me._State
			End Get
			Set
				If (String.Equals(Me._State, value) = false) Then
					Me._State = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZipCode", DbType:="Float")>  _
		Public Property ZipCode() As System.Nullable(Of Double)
			Get
				Return Me._ZipCode
			End Get
			Set
				If (Me._ZipCode.Equals(value) = false) Then
					Me._ZipCode = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxRegionName", DbType:="VarChar(255)")>  _
		Public Property TaxRegionName() As String
			Get
				Return Me._TaxRegionName
			End Get
			Set
				If (String.Equals(Me._TaxRegionName, value) = false) Then
					Me._TaxRegionName = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxRegionCode", DbType:="VarChar(255)")>  _
		Public Property TaxRegionCode() As String
			Get
				Return Me._TaxRegionCode
			End Get
			Set
				If (String.Equals(Me._TaxRegionCode, value) = false) Then
					Me._TaxRegionCode = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CombinedRate", DbType:="Float")>  _
		Public Property CombinedRate() As System.Nullable(Of Double)
			Get
				Return Me._CombinedRate
			End Get
			Set
				If (Me._CombinedRate.Equals(value) = false) Then
					Me._CombinedRate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateRate", DbType:="Float")>  _
		Public Property StateRate() As System.Nullable(Of Double)
			Get
				Return Me._StateRate
			End Get
			Set
				If (Me._StateRate.Equals(value) = false) Then
					Me._StateRate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountyRate", DbType:="Float")>  _
		Public Property CountyRate() As System.Nullable(Of Double)
			Get
				Return Me._CountyRate
			End Get
			Set
				If (Me._CountyRate.Equals(value) = false) Then
					Me._CountyRate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityRate", DbType:="Float")>  _
		Public Property CityRate() As System.Nullable(Of Double)
			Get
				Return Me._CityRate
			End Get
			Set
				If (Me._CityRate.Equals(value) = false) Then
					Me._CityRate = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecialRate", DbType:="Float")>  _
		Public Property SpecialRate() As System.Nullable(Of Double)
			Get
				Return Me._SpecialRate
			End Get
			Set
				If (Me._SpecialRate.Equals(value) = false) Then
					Me._SpecialRate = value
				End If
			End Set
		End Property
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
	Partial Public Class User
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserID As Integer
		
		Private _Username As String
		
		Private _Password As String
		
		Private _AccessLevel As System.Nullable(Of Integer)
		
		Private _Active As System.Nullable(Of Integer)
		
		Private _Status As String
		
		Private _DateCreated As System.Nullable(Of Date)
		
		Private _DateModified As System.Nullable(Of Date)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnAccessLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAccessLevelChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateModifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateModifiedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property UserID() As Integer
			Get
				Return Me._UserID
			End Get
			Set
				If ((Me._UserID = value)  _
							= false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(50)")>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccessLevel", DbType:="Int")>  _
		Public Property AccessLevel() As System.Nullable(Of Integer)
			Get
				Return Me._AccessLevel
			End Get
			Set
				If (Me._AccessLevel.Equals(value) = false) Then
					Me.OnAccessLevelChanging(value)
					Me.SendPropertyChanging
					Me._AccessLevel = value
					Me.SendPropertyChanged("AccessLevel")
					Me.OnAccessLevelChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Int")>  _
		Public Property Active() As System.Nullable(Of Integer)
			Get
				Return Me._Active
			End Get
			Set
				If (Me._Active.Equals(value) = false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(50)")>  _
		Public Property Status() As String
			Get
				Return Me._Status
			End Get
			Set
				If (String.Equals(Me._Status, value) = false) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
		Public Property DateCreated() As System.Nullable(Of Date)
			Get
				Return Me._DateCreated
			End Get
			Set
				If (Me._DateCreated.Equals(value) = false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateModified", DbType:="DateTime")>  _
		Public Property DateModified() As System.Nullable(Of Date)
			Get
				Return Me._DateModified
			End Get
			Set
				If (Me._DateModified.Equals(value) = false) Then
					Me.OnDateModifiedChanging(value)
					Me.SendPropertyChanging
					Me._DateModified = value
					Me.SendPropertyChanged("DateModified")
					Me.OnDateModifiedChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
